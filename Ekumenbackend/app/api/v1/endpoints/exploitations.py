"""
Exploitations (farms/enterprises) endpoints.
"""

from typing import List, Optional
from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session
from app.core.database import get_db
from app.models.mesparcelles import Exploitation, ServiceActivation
from app.schemas.mesparcelles import ExploitationCreate, ExploitationResponse, ServiceActivationResponse
import structlog

logger = structlog.get_logger()
router = APIRouter()


@router.get("/", response_model=List[ExploitationResponse])
async def get_exploitations(
    skip: int = Query(0, ge=0),
    limit: int = Query(100, ge=1, le=1000),
    db: Session = Depends(get_db)
):
    """Get all exploitations with pagination."""
    exploitations = db.query(Exploitation).offset(skip).limit(limit).all()
    return exploitations


@router.get("/{siret}", response_model=ExploitationResponse)
async def get_exploitation(siret: str, db: Session = Depends(get_db)):
    """Get a specific exploitation by SIRET."""
    exploitation = db.query(Exploitation).filter(Exploitation.siret == siret).first()
    if not exploitation:
        raise HTTPException(status_code=404, detail="Exploitation not found")
    return exploitation


@router.post("/", response_model=ExploitationResponse)
async def create_exploitation(
    exploitation: ExploitationCreate,
    db: Session = Depends(get_db)
):
    """Create a new exploitation."""
    # Check if exploitation already exists
    existing = db.query(Exploitation).filter(Exploitation.siret == exploitation.siret).first()
    if existing:
        raise HTTPException(status_code=400, detail="Exploitation already exists")
    
    db_exploitation = Exploitation(siret=exploitation.siret)
    db.add(db_exploitation)
    db.commit()
    db.refresh(db_exploitation)
    
    logger.info("Exploitation created", siret=exploitation.siret)
    return db_exploitation


@router.delete("/{siret}")
async def delete_exploitation(siret: str, db: Session = Depends(get_db)):
    """Delete an exploitation."""
    exploitation = db.query(Exploitation).filter(Exploitation.siret == siret).first()
    if not exploitation:
        raise HTTPException(status_code=404, detail="Exploitation not found")
    
    db.delete(exploitation)
    db.commit()
    
    logger.info("Exploitation deleted", siret=siret)
    return {"message": "Exploitation deleted successfully"}


@router.get("/{siret}/service-activation", response_model=ServiceActivationResponse)
async def get_service_activation(siret: str, db: Session = Depends(get_db)):
    """Get service activation status for an exploitation."""
    service_activation = db.query(ServiceActivation).filter(
        ServiceActivation.siret == siret
    ).first()
    
    if not service_activation:
        raise HTTPException(status_code=404, detail="Service activation not found")
    
    return service_activation


@router.post("/{siret}/service-activation", response_model=ServiceActivationResponse)
async def create_service_activation(
    siret: str,
    millesime_active: List[int],
    millesime_deja_actif: List[int],
    db: Session = Depends(get_db)
):
    """Create or update service activation for an exploitation."""
    # Check if exploitation exists
    exploitation = db.query(Exploitation).filter(Exploitation.siret == siret).first()
    if not exploitation:
        raise HTTPException(status_code=404, detail="Exploitation not found")
    
    # Check if service activation already exists
    existing = db.query(ServiceActivation).filter(ServiceActivation.siret == siret).first()
    
    if existing:
        # Update existing
        existing.millesime_active = millesime_active
        existing.millesime_deja_actif = millesime_deja_actif
        db.commit()
        db.refresh(existing)
        logger.info("Service activation updated", siret=siret)
        return existing
    else:
        # Create new
        service_activation = ServiceActivation(
            siret=siret,
            millesime_active=millesime_active,
            millesime_deja_actif=millesime_deja_actif
        )
        db.add(service_activation)
        db.commit()
        db.refresh(service_activation)
        logger.info("Service activation created", siret=siret)
        return service_activation
