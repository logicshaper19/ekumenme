services:
  # PostgreSQL Database
  postgres:
    image: postgis/postgis:15-3.3
    container_name: ekumen-db
    environment:
      POSTGRES_DB: ekumen_assistant
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - agricultural-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ekumen_assistant"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ekumen-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - agricultural-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # FastAPI Backend
  backend:
    build:
      context: ./Ekumen-assistant
      dockerfile: Dockerfile
    container_name: ekumen-assistant-backend
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/ekumen_assistant
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - WEATHER_API_KEY=${WEATHER_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./Ekumen-assistant:/app
    networks:
      - agricultural-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: ./Ekumen-frontend
      dockerfile: Dockerfile
    container_name: ekumen-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./Ekumen-frontend:/app
      - /app/node_modules
    networks:
      - agricultural-network
    command: npm run dev
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  agricultural-network:
    driver: bridge
