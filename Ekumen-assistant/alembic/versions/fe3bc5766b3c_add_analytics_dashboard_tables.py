"""Add analytics dashboard tables

Revision ID: fe3bc5766b3c
Revises: 08fbde581c72
Create Date: 2025-10-03 23:13:17.070903

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'fe3bc5766b3c'
down_revision: Union[str, Sequence[str], None] = '08fbde581c72'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('document_analytics',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('document_id', sa.String(length=255), nullable=False),
    sa.Column('document_name', sa.String(length=500), nullable=False),
    sa.Column('document_audience', sa.String(length=20), nullable=False),
    sa.Column('period_start', sa.DateTime(timezone=True), nullable=False),
    sa.Column('period_end', sa.DateTime(timezone=True), nullable=False),
    sa.Column('period_type', sa.String(length=20), nullable=False),
    sa.Column('retrievals', sa.Integer(), nullable=False),
    sa.Column('citations', sa.Integer(), nullable=False),
    sa.Column('user_interactions', sa.Integer(), nullable=False),
    sa.Column('satisfaction_score', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('satisfaction_count', sa.Integer(), nullable=False),
    sa.Column('citation_rate', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('trend_percentage', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('extra_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_document_analytics_audience_period', 'document_analytics', ['document_audience', 'period_start'], unique=False)
    op.create_index('idx_document_analytics_doc_period', 'document_analytics', ['document_id', 'period_start', 'period_end'], unique=False)
    op.create_index(op.f('ix_document_analytics_document_audience'), 'document_analytics', ['document_audience'], unique=False)
    op.create_index(op.f('ix_document_analytics_document_id'), 'document_analytics', ['document_id'], unique=False)
    op.create_index(op.f('ix_document_analytics_id'), 'document_analytics', ['id'], unique=False)
    op.create_index(op.f('ix_document_analytics_period_end'), 'document_analytics', ['period_end'], unique=False)
    op.create_index(op.f('ix_document_analytics_period_start'), 'document_analytics', ['period_start'], unique=False)
    op.create_index(op.f('ix_document_analytics_period_type'), 'document_analytics', ['period_type'], unique=False)
    op.create_table('user_segment_analytics',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('segment_type', sa.String(length=50), nullable=False),
    sa.Column('segment_value', sa.String(length=100), nullable=False),
    sa.Column('period_start', sa.DateTime(timezone=True), nullable=False),
    sa.Column('period_end', sa.DateTime(timezone=True), nullable=False),
    sa.Column('period_type', sa.String(length=20), nullable=False),
    sa.Column('total_queries', sa.Integer(), nullable=False),
    sa.Column('unique_users', sa.Integer(), nullable=False),
    sa.Column('avg_session_duration', sa.Numeric(precision=8, scale=2), nullable=True),
    sa.Column('avg_queries_per_session', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('top_topics', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('top_products', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('top_documents', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('satisfaction_score', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('satisfaction_count', sa.Integer(), nullable=False),
    sa.Column('extra_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_user_segment_analytics_segment_period', 'user_segment_analytics', ['segment_type', 'segment_value', 'period_start'], unique=False)
    op.create_index(op.f('ix_user_segment_analytics_id'), 'user_segment_analytics', ['id'], unique=False)
    op.create_index(op.f('ix_user_segment_analytics_period_end'), 'user_segment_analytics', ['period_end'], unique=False)
    op.create_index(op.f('ix_user_segment_analytics_period_start'), 'user_segment_analytics', ['period_start'], unique=False)
    op.create_index(op.f('ix_user_segment_analytics_period_type'), 'user_segment_analytics', ['period_type'], unique=False)
    op.create_index(op.f('ix_user_segment_analytics_segment_type'), 'user_segment_analytics', ['segment_type'], unique=False)
    op.create_index(op.f('ix_user_segment_analytics_segment_value'), 'user_segment_analytics', ['segment_value'], unique=False)
    op.create_table('content_gaps',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('gap_title', sa.String(length=500), nullable=False),
    sa.Column('gap_description', sa.Text(), nullable=True),
    sa.Column('gap_category', sa.String(length=100), nullable=False),
    sa.Column('related_queries', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('query_count', sa.Integer(), nullable=False),
    sa.Column('unique_users', sa.Integer(), nullable=False),
    sa.Column('priority_score', sa.Integer(), nullable=False),
    sa.Column('impact_score', sa.Integer(), nullable=False),
    sa.Column('effort_score', sa.Integer(), nullable=False),
    sa.Column('target_audience', sa.String(length=20), nullable=False),
    sa.Column('seasonal_relevance', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('due_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('assigned_to', sa.UUID(), nullable=True),
    sa.Column('extra_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['assigned_to'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_content_gaps_priority_impact', 'content_gaps', ['priority_score', 'impact_score'], unique=False)
    op.create_index('idx_content_gaps_status_due', 'content_gaps', ['status', 'due_date'], unique=False)
    op.create_index(op.f('ix_content_gaps_due_date'), 'content_gaps', ['due_date'], unique=False)
    op.create_index(op.f('ix_content_gaps_effort_score'), 'content_gaps', ['effort_score'], unique=False)
    op.create_index(op.f('ix_content_gaps_gap_category'), 'content_gaps', ['gap_category'], unique=False)
    op.create_index(op.f('ix_content_gaps_id'), 'content_gaps', ['id'], unique=False)
    op.create_index(op.f('ix_content_gaps_impact_score'), 'content_gaps', ['impact_score'], unique=False)
    op.create_index(op.f('ix_content_gaps_priority_score'), 'content_gaps', ['priority_score'], unique=False)
    op.create_index(op.f('ix_content_gaps_status'), 'content_gaps', ['status'], unique=False)
    op.create_index(op.f('ix_content_gaps_target_audience'), 'content_gaps', ['target_audience'], unique=False)
    op.create_table('query_analytics',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('query_text', sa.Text(), nullable=False),
    sa.Column('query_hash', sa.String(length=64), nullable=False),
    sa.Column('query_topics', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('query_products', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('query_compliance_themes', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('user_role', sa.String(length=20), nullable=True),
    sa.Column('user_region', sa.String(length=100), nullable=True),
    sa.Column('period_start', sa.DateTime(timezone=True), nullable=False),
    sa.Column('period_end', sa.DateTime(timezone=True), nullable=False),
    sa.Column('period_type', sa.String(length=20), nullable=False),
    sa.Column('query_count', sa.Integer(), nullable=False),
    sa.Column('unique_users', sa.Integer(), nullable=False),
    sa.Column('avg_response_time', sa.Numeric(precision=8, scale=2), nullable=True),
    sa.Column('satisfaction_score', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('satisfaction_count', sa.Integer(), nullable=False),
    sa.Column('growth_percentage', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('extra_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_query_analytics_hash_period', 'query_analytics', ['query_hash', 'period_start'], unique=False)
    op.create_index('idx_query_analytics_products_period', 'query_analytics', ['query_products', 'period_start'], unique=False)
    op.create_index('idx_query_analytics_topics_period', 'query_analytics', ['query_topics', 'period_start'], unique=False)
    op.create_index(op.f('ix_query_analytics_id'), 'query_analytics', ['id'], unique=False)
    op.create_index(op.f('ix_query_analytics_period_end'), 'query_analytics', ['period_end'], unique=False)
    op.create_index(op.f('ix_query_analytics_period_start'), 'query_analytics', ['period_start'], unique=False)
    op.create_index(op.f('ix_query_analytics_period_type'), 'query_analytics', ['period_type'], unique=False)
    op.create_index(op.f('ix_query_analytics_query_hash'), 'query_analytics', ['query_hash'], unique=False)
    op.create_index(op.f('ix_query_analytics_user_id'), 'query_analytics', ['user_id'], unique=False)
    op.create_index(op.f('ix_query_analytics_user_region'), 'query_analytics', ['user_region'], unique=False)
    op.create_index(op.f('ix_query_analytics_user_role'), 'query_analytics', ['user_role'], unique=False)
    op.create_table('analytics_alerts',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('alert_type', sa.String(length=50), nullable=False),
    sa.Column('alert_title', sa.String(length=500), nullable=False),
    sa.Column('alert_description', sa.Text(), nullable=True),
    sa.Column('alert_severity', sa.String(length=20), nullable=False),
    sa.Column('document_id', sa.String(length=255), nullable=True),
    sa.Column('content_gap_id', sa.UUID(), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('alert_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('threshold_value', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('current_value', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_read', sa.Boolean(), nullable=False),
    sa.Column('acknowledged_by', sa.UUID(), nullable=True),
    sa.Column('acknowledged_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('extra_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['acknowledged_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['content_gap_id'], ['content_gaps.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_analytics_alerts_active_severity', 'analytics_alerts', ['is_active', 'alert_severity'], unique=False)
    op.create_index('idx_analytics_alerts_user_unread', 'analytics_alerts', ['user_id', 'is_read'], unique=False)
    op.create_index(op.f('ix_analytics_alerts_alert_severity'), 'analytics_alerts', ['alert_severity'], unique=False)
    op.create_index(op.f('ix_analytics_alerts_alert_type'), 'analytics_alerts', ['alert_type'], unique=False)
    op.create_index(op.f('ix_analytics_alerts_document_id'), 'analytics_alerts', ['document_id'], unique=False)
    op.create_index(op.f('ix_analytics_alerts_id'), 'analytics_alerts', ['id'], unique=False)
    op.create_index(op.f('ix_analytics_alerts_is_active'), 'analytics_alerts', ['is_active'], unique=False)
    op.create_index(op.f('ix_analytics_alerts_is_read'), 'analytics_alerts', ['is_read'], unique=False)
    op.create_index(op.f('ix_analytics_alerts_user_id'), 'analytics_alerts', ['user_id'], unique=False)
    op.create_table('analytics_events',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('session_id', sa.UUID(), nullable=True),
    sa.Column('conversation_id', sa.UUID(), nullable=True),
    sa.Column('event_type', sa.String(length=50), nullable=False),
    sa.Column('event_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('endpoint', sa.String(length=500), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['conversation_id'], ['conversations.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_analytics_events_type_created', 'analytics_events', ['event_type', 'created_at'], unique=False)
    op.create_index('idx_analytics_events_user_created', 'analytics_events', ['user_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_analytics_events_conversation_id'), 'analytics_events', ['conversation_id'], unique=False)
    op.create_index(op.f('ix_analytics_events_event_type'), 'analytics_events', ['event_type'], unique=False)
    op.create_index(op.f('ix_analytics_events_id'), 'analytics_events', ['id'], unique=False)
    op.create_index(op.f('ix_analytics_events_session_id'), 'analytics_events', ['session_id'], unique=False)
    op.create_index(op.f('ix_analytics_events_user_id'), 'analytics_events', ['user_id'], unique=False)
    op.drop_index(op.f('idx_ephy_usages_amm'), table_name='ephy_usages')
    op.drop_table('ephy_usages')
    op.drop_index(op.f('idx_ephy_substances_nom'), table_name='ephy_substances')
    op.drop_table('ephy_substances')
    op.drop_table('permis_commerce_parallele')
    op.drop_index(op.f('ix_bbch_crop_code'), table_name='bbch_stages')
    op.drop_index(op.f('ix_bbch_crop_type'), table_name='bbch_stages')
    op.drop_index(op.f('ix_bbch_principal'), table_name='bbch_stages')
    op.drop_index(op.f('ix_bbch_stages_bbch_code'), table_name='bbch_stages')
    op.drop_index(op.f('ix_bbch_stages_crop_eppo_code'), table_name='bbch_stages')
    op.drop_index(op.f('ix_bbch_stages_crop_type'), table_name='bbch_stages')
    op.drop_index(op.f('ix_bbch_stages_principal_stage'), table_name='bbch_stages')
    op.drop_table('bbch_stages')
    op.drop_index(op.f('idx_ephy_products_amm'), table_name='ephy_products')
    op.drop_index(op.f('idx_ephy_products_nom'), table_name='ephy_products')
    op.drop_table('ephy_products')
    op.drop_table('spatial_ref_sys')
    op.drop_table('produit_conditions_emploi')
    op.alter_column('conversations', 'user_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('conversations', 'title',
               existing_type=sa.VARCHAR(length=500),
               type_=sa.String(length=255),
               nullable=False)
    op.alter_column('conversations', 'agent_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=False,
               existing_server_default=sa.text("'orchestrator'::agenttype"))
    op.alter_column('conversations', 'status',
               existing_type=sa.VARCHAR(length=50),
               nullable=False,
               existing_server_default=sa.text("'active'::character varying"))
    op.alter_column('conversations', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('conversations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('idx_conversations_organization_id'), table_name='conversations')
    op.drop_index(op.f('idx_conversations_user'), table_name='conversations')
    op.create_index(op.f('ix_conversations_agent_type'), 'conversations', ['agent_type'], unique=False)
    op.create_index(op.f('ix_conversations_farm_siret'), 'conversations', ['farm_siret'], unique=False)
    op.create_index(op.f('ix_conversations_id'), 'conversations', ['id'], unique=False)
    op.create_index(op.f('ix_conversations_organization_id'), 'conversations', ['organization_id'], unique=False)
    op.create_index(op.f('ix_conversations_user_id'), 'conversations', ['user_id'], unique=False)
    op.drop_constraint(op.f('conversations_user_id_fkey'), 'conversations', type_='foreignkey')
    op.drop_constraint(op.f('conversations_farm_siret_fkey'), 'conversations', type_='foreignkey')
    op.create_foreign_key(None, 'conversations', 'users', ['user_id'], ['id'])
    op.add_column('crops', sa.Column('name_fr', sa.String(length=100), nullable=False))
    op.add_column('crops', sa.Column('name_en', sa.String(length=100), nullable=True))
    op.add_column('crops', sa.Column('eppo_code', sa.String(length=6), nullable=False))
    op.add_column('crops', sa.Column('family', sa.String(length=100), nullable=True))
    op.add_column('crops', sa.Column('common_names', sa.Text(), nullable=True))
    op.add_column('crops', sa.Column('description', sa.Text(), nullable=True))
    op.add_column('crops', sa.Column('growing_season', sa.String(length=50), nullable=True))
    op.add_column('crops', sa.Column('typical_duration_days', sa.Integer(), nullable=True))
    op.add_column('crops', sa.Column('is_active', sa.Boolean(), nullable=False))
    op.add_column('crops', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.alter_column('crops', 'id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('crops', 'scientific_name',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=200),
               existing_nullable=True)
    op.alter_column('crops', 'category',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               existing_nullable=True)
    op.alter_column('crops', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.create_index('ix_crops_active', 'crops', ['is_active'], unique=False)
    op.create_index('ix_crops_category', 'crops', ['category'], unique=False)
    op.create_index(op.f('ix_crops_eppo_code'), 'crops', ['eppo_code'], unique=True)
    op.create_index(op.f('ix_crops_id'), 'crops', ['id'], unique=False)
    op.create_index(op.f('ix_crops_is_active'), 'crops', ['is_active'], unique=False)
    op.create_index(op.f('ix_crops_name_en'), 'crops', ['name_en'], unique=False)
    op.create_index('ix_crops_name_fr', 'crops', ['name_fr'], unique=False)
    op.drop_column('crops', 'name')
    op.drop_column('crops', 'growth_cycle_days')
    op.drop_column('crops', 'water_requirements')
    op.add_column('diseases', sa.Column('common_names', sa.JSON(), nullable=True))
    op.add_column('diseases', sa.Column('disease_type', sa.String(length=100), nullable=False))
    op.add_column('diseases', sa.Column('pathogen_name', sa.String(length=200), nullable=True))
    op.add_column('diseases', sa.Column('severity_level', sa.String(length=50), nullable=False))
    op.add_column('diseases', sa.Column('eppo_code', sa.String(length=10), nullable=True))
    op.add_column('diseases', sa.Column('primary_crop', sa.String(length=100), nullable=False))
    op.add_column('diseases', sa.Column('primary_crop_eppo', sa.String(length=6), nullable=True))
    op.add_column('diseases', sa.Column('crop_id', sa.Integer(), nullable=True))
    op.add_column('diseases', sa.Column('visual_indicators', sa.JSON(), nullable=True))
    op.add_column('diseases', sa.Column('damage_patterns', sa.JSON(), nullable=True))
    op.add_column('diseases', sa.Column('favorable_conditions', sa.JSON(), nullable=True))
    op.add_column('diseases', sa.Column('seasonal_occurrence', sa.JSON(), nullable=True))
    op.add_column('diseases', sa.Column('geographic_distribution', sa.JSON(), nullable=True))
    op.add_column('diseases', sa.Column('prevention_methods', sa.JSON(), nullable=True))
    op.add_column('diseases', sa.Column('organic_treatments', sa.JSON(), nullable=True))
    op.add_column('diseases', sa.Column('chemical_treatments', sa.JSON(), nullable=True))
    op.add_column('diseases', sa.Column('yield_impact', sa.String(length=50), nullable=True))
    op.add_column('diseases', sa.Column('economic_threshold', sa.Float(), nullable=True))
    op.add_column('diseases', sa.Column('resistance_management', sa.JSON(), nullable=True))
    op.add_column('diseases', sa.Column('confidence_score', sa.Float(), nullable=True))
    op.add_column('diseases', sa.Column('data_source', sa.String(length=200), nullable=True))
    op.add_column('diseases', sa.Column('last_verified', sa.DateTime(), nullable=True))
    op.add_column('diseases', sa.Column('description', sa.Text(), nullable=True))
    op.add_column('diseases', sa.Column('keywords', sa.JSON(), nullable=True))
    op.add_column('diseases', sa.Column('search_vector', sa.Text(), nullable=True))
    op.add_column('diseases', sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True))
    op.add_column('diseases', sa.Column('is_active', sa.Boolean(), nullable=True))
    op.alter_column('diseases', 'id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('diseases', 'name',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=200),
               existing_nullable=False)
    op.alter_column('diseases', 'scientific_name',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=300),
               existing_nullable=True)
    op.alter_column('diseases', 'affected_crops',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               nullable=False)
    op.alter_column('diseases', 'symptoms',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               nullable=False)
    op.alter_column('diseases', 'treatment_options',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               nullable=False)
    op.alter_column('diseases', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.create_index(op.f('ix_diseases_crop_id'), 'diseases', ['crop_id'], unique=False)
    op.create_index(op.f('ix_diseases_disease_type'), 'diseases', ['disease_type'], unique=False)
    op.create_index(op.f('ix_diseases_eppo_code'), 'diseases', ['eppo_code'], unique=False)
    op.create_index(op.f('ix_diseases_id'), 'diseases', ['id'], unique=False)
    op.create_index(op.f('ix_diseases_name'), 'diseases', ['name'], unique=False)
    op.create_index(op.f('ix_diseases_primary_crop'), 'diseases', ['primary_crop'], unique=False)
    op.create_index(op.f('ix_diseases_primary_crop_eppo'), 'diseases', ['primary_crop_eppo'], unique=False)
    op.create_index(op.f('ix_diseases_severity_level'), 'diseases', ['severity_level'], unique=False)
    op.alter_column('exploitations', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('exploitations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.create_index(op.f('ix_exploitations_commune_insee'), 'exploitations', ['commune_insee'], unique=False)
    op.create_index(op.f('ix_exploitations_department_code'), 'exploitations', ['department_code'], unique=False)
    op.create_index(op.f('ix_exploitations_region_code'), 'exploitations', ['region_code'], unique=False)
    op.create_index(op.f('ix_exploitations_siret'), 'exploitations', ['siret'], unique=False)
    op.alter_column('interventions', 'parcelle_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('interventions', 'siret',
               existing_type=sa.VARCHAR(length=14),
               nullable=False)
    op.alter_column('interventions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('interventions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('idx_interventions_parcelle'), table_name='interventions')
    op.drop_constraint(op.f('interventions_uuid_intervention_key'), 'interventions', type_='unique')
    op.create_index(op.f('ix_interventions_date_intervention'), 'interventions', ['date_intervention'], unique=False)
    op.create_index(op.f('ix_interventions_id'), 'interventions', ['id'], unique=False)
    op.create_index(op.f('ix_interventions_parcelle_id'), 'interventions', ['parcelle_id'], unique=False)
    op.create_index(op.f('ix_interventions_siret'), 'interventions', ['siret'], unique=False)
    op.create_index(op.f('ix_interventions_type_intervention'), 'interventions', ['type_intervention'], unique=False)
    op.create_index(op.f('ix_interventions_uuid_intervention'), 'interventions', ['uuid_intervention'], unique=True)
    op.drop_constraint(op.f('interventions_siret_fkey'), 'interventions', type_='foreignkey')
    op.drop_constraint(op.f('interventions_parcelle_id_fkey'), 'interventions', type_='foreignkey')
    op.create_foreign_key(None, 'interventions', 'exploitations', ['siret'], ['siret'])
    op.create_foreign_key(None, 'interventions', 'parcelles', ['parcelle_id'], ['id'])
    op.alter_column('intrants', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('intrants', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(op.f('intrants_id_intrant_key'), 'intrants', type_='unique')
    op.create_index(op.f('ix_intrants_code_amm'), 'intrants', ['code_amm'], unique=False)
    op.create_index(op.f('ix_intrants_id'), 'intrants', ['id'], unique=False)
    op.create_index(op.f('ix_intrants_id_intrant'), 'intrants', ['id_intrant'], unique=True)
    op.create_index(op.f('ix_intrants_type_intrant'), 'intrants', ['type_intrant'], unique=False)
    op.alter_column('messages', 'conversation_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('messages', 'thread_id',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=100),
               existing_nullable=True)
    op.alter_column('messages', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('idx_messages_conversation'), table_name='messages')
    op.create_index(op.f('ix_messages_conversation_id'), 'messages', ['conversation_id'], unique=False)
    op.create_index(op.f('ix_messages_id'), 'messages', ['id'], unique=False)
    op.create_index(op.f('ix_messages_sender'), 'messages', ['sender'], unique=False)
    op.create_index(op.f('ix_messages_thread_id'), 'messages', ['thread_id'], unique=False)
    op.drop_constraint(op.f('messages_parent_message_id_fkey'), 'messages', type_='foreignkey')
    op.drop_constraint(op.f('messages_conversation_id_fkey'), 'messages', type_='foreignkey')
    op.create_foreign_key(None, 'messages', 'messages', ['parent_message_id'], ['id'])
    op.create_foreign_key(None, 'messages', 'conversations', ['conversation_id'], ['id'])
    op.alter_column('parcelles', 'siret',
               existing_type=sa.VARCHAR(length=14),
               nullable=False)
    op.alter_column('parcelles', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('parcelles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('idx_parcelles_siret'), table_name='parcelles')
    op.drop_constraint(op.f('parcelles_uuid_parcelle_key'), 'parcelles', type_='unique')
    op.create_index(op.f('ix_parcelles_commune_insee'), 'parcelles', ['commune_insee'], unique=False)
    op.create_index(op.f('ix_parcelles_culture_code'), 'parcelles', ['culture_code'], unique=False)
    op.create_index(op.f('ix_parcelles_id'), 'parcelles', ['id'], unique=False)
    op.create_index(op.f('ix_parcelles_millesime'), 'parcelles', ['millesime'], unique=False)
    op.create_index(op.f('ix_parcelles_siret'), 'parcelles', ['siret'], unique=False)
    op.create_index(op.f('ix_parcelles_uuid_parcelle'), 'parcelles', ['uuid_parcelle'], unique=True)
    op.drop_constraint(op.f('parcelles_siret_fkey'), 'parcelles', type_='foreignkey')
    op.create_foreign_key(None, 'parcelles', 'exploitations', ['siret'], ['siret'])
    op.add_column('pests', sa.Column('common_names', sa.JSON(), nullable=True))
    op.add_column('pests', sa.Column('pest_type', sa.String(length=100), nullable=False))
    op.add_column('pests', sa.Column('pest_family', sa.String(length=200), nullable=True))
    op.add_column('pests', sa.Column('life_cycle', sa.String(length=100), nullable=True))
    op.add_column('pests', sa.Column('severity_level', sa.String(length=50), nullable=False))
    op.add_column('pests', sa.Column('primary_crop', sa.String(length=100), nullable=False))
    op.add_column('pests', sa.Column('damage_patterns', sa.JSON(), nullable=False))
    op.add_column('pests', sa.Column('pest_indicators', sa.JSON(), nullable=False))
    op.add_column('pests', sa.Column('visual_identification', sa.JSON(), nullable=True))
    op.add_column('pests', sa.Column('behavioral_signs', sa.JSON(), nullable=True))
    op.add_column('pests', sa.Column('development_stages', sa.JSON(), nullable=True))
    op.add_column('pests', sa.Column('reproduction_rate', sa.String(length=50), nullable=True))
    op.add_column('pests', sa.Column('overwintering_strategy', sa.String(length=200), nullable=True))
    op.add_column('pests', sa.Column('host_range', sa.JSON(), nullable=True))
    op.add_column('pests', sa.Column('favorable_conditions', sa.JSON(), nullable=True))
    op.add_column('pests', sa.Column('seasonal_activity', sa.JSON(), nullable=True))
    op.add_column('pests', sa.Column('geographic_distribution', sa.JSON(), nullable=True))
    op.add_column('pests', sa.Column('treatment_options', sa.JSON(), nullable=False))
    op.add_column('pests', sa.Column('prevention_methods', sa.JSON(), nullable=True))
    op.add_column('pests', sa.Column('biological_control', sa.JSON(), nullable=True))
    op.add_column('pests', sa.Column('chemical_control', sa.JSON(), nullable=True))
    op.add_column('pests', sa.Column('cultural_control', sa.JSON(), nullable=True))
    op.add_column('pests', sa.Column('yield_impact', sa.String(length=50), nullable=True))
    op.add_column('pests', sa.Column('economic_threshold', sa.Float(), nullable=True))
    op.add_column('pests', sa.Column('action_threshold', sa.Float(), nullable=True))
    op.add_column('pests', sa.Column('resistance_management', sa.JSON(), nullable=True))
    op.add_column('pests', sa.Column('monitoring_methods', sa.JSON(), nullable=True))
    op.add_column('pests', sa.Column('trap_types', sa.JSON(), nullable=True))
    op.add_column('pests', sa.Column('scouting_frequency', sa.String(length=100), nullable=True))
    op.add_column('pests', sa.Column('confidence_score', sa.Float(), nullable=True))
    op.add_column('pests', sa.Column('data_source', sa.String(length=200), nullable=True))
    op.add_column('pests', sa.Column('last_verified', sa.DateTime(), nullable=True))
    op.add_column('pests', sa.Column('description', sa.Text(), nullable=True))
    op.add_column('pests', sa.Column('keywords', sa.JSON(), nullable=True))
    op.add_column('pests', sa.Column('search_vector', sa.Text(), nullable=True))
    op.add_column('pests', sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True))
    op.add_column('pests', sa.Column('is_active', sa.Boolean(), nullable=True))
    op.alter_column('pests', 'id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('pests', 'name',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=200),
               existing_nullable=False)
    op.alter_column('pests', 'scientific_name',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=300),
               existing_nullable=True)
    op.alter_column('pests', 'affected_crops',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               nullable=False)
    op.alter_column('pests', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.create_index(op.f('ix_pests_id'), 'pests', ['id'], unique=False)
    op.create_index(op.f('ix_pests_name'), 'pests', ['name'], unique=False)
    op.create_index(op.f('ix_pests_pest_type'), 'pests', ['pest_type'], unique=False)
    op.create_index(op.f('ix_pests_primary_crop'), 'pests', ['primary_crop'], unique=False)
    op.create_index(op.f('ix_pests_severity_level'), 'pests', ['severity_level'], unique=False)
    op.drop_column('pests', 'control_methods')
    op.drop_column('pests', 'damage_description')
    op.add_column('phrases_risque', sa.Column('code_phrase', sa.String(length=20), nullable=False))
    op.add_column('phrases_risque', sa.Column('libelle_phrase', sa.Text(), nullable=False))
    op.alter_column('phrases_risque', 'type_phrase',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=10),
               existing_nullable=True)
    op.alter_column('phrases_risque', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_column('phrases_risque', 'libelle_court')
    op.drop_column('phrases_risque', 'libelle_long')
    op.drop_column('phrases_risque', 'code')
    op.add_column('produit_fonctions', sa.Column('fonction_id', sa.Integer(), nullable=True))
    op.alter_column('produit_fonctions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(op.f('produit_fonctions_numero_amm_fkey'), 'produit_fonctions', type_='foreignkey')
    op.create_foreign_key(None, 'produit_fonctions', 'fonctions', ['fonction_id'], ['id'])
    op.create_foreign_key(None, 'produit_fonctions', 'produits', ['numero_amm'], ['numero_amm'])
    op.drop_column('produit_fonctions', 'fonction')
    op.add_column('produit_formulations', sa.Column('formulation_id', sa.Integer(), nullable=True))
    op.alter_column('produit_formulations', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(op.f('produit_formulations_numero_amm_fkey'), 'produit_formulations', type_='foreignkey')
    op.create_foreign_key(None, 'produit_formulations', 'produits', ['numero_amm'], ['numero_amm'])
    op.create_foreign_key(None, 'produit_formulations', 'formulations', ['formulation_id'], ['id'])
    op.drop_column('produit_formulations', 'formulation')
    op.add_column('produit_phrases_risque', sa.Column('phrase_risque_id', sa.Integer(), nullable=True))
    op.alter_column('produit_phrases_risque', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(op.f('produit_phrases_risque_numero_amm_phrase_id_key'), 'produit_phrases_risque', type_='unique')
    op.drop_constraint(op.f('produit_phrases_risque_numero_amm_fkey'), 'produit_phrases_risque', type_='foreignkey')
    op.drop_constraint(op.f('produit_phrases_risque_phrase_id_fkey'), 'produit_phrases_risque', type_='foreignkey')
    op.create_foreign_key(None, 'produit_phrases_risque', 'produits', ['numero_amm'], ['numero_amm'])
    op.create_foreign_key(None, 'produit_phrases_risque', 'phrases_risque', ['phrase_risque_id'], ['id'])
    op.drop_column('produit_phrases_risque', 'phrase_id')
    op.alter_column('produit_substances', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('idx_produit_substances_amm'), table_name='produit_substances')
    op.drop_index(op.f('idx_produit_substances_substance'), table_name='produit_substances')
    op.drop_constraint(op.f('produit_substances_numero_amm_substance_id_key'), 'produit_substances', type_='unique')
    op.drop_constraint(op.f('produit_substances_substance_id_fkey'), 'produit_substances', type_='foreignkey')
    op.drop_constraint(op.f('produit_substances_numero_amm_fkey'), 'produit_substances', type_='foreignkey')
    op.create_foreign_key(None, 'produit_substances', 'produits', ['numero_amm'], ['numero_amm'])
    op.create_foreign_key(None, 'produit_substances', 'substances_actives', ['substance_id'], ['id'])
    op.alter_column('produits', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('idx_produits_etat'), table_name='produits')
    op.drop_index(op.f('idx_produits_nom'), table_name='produits')
    op.drop_index(op.f('idx_produits_titulaire'), table_name='produits')
    op.alter_column('substances_actives', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('idx_substances_nom'), table_name='substances_actives')
    op.alter_column('titulaires', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('usages_produits', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('idx_usages_amm'), table_name='usages_produits')
    op.drop_index(op.f('idx_usages_culture'), table_name='usages_produits')
    op.drop_constraint(op.f('usages_produits_numero_amm_fkey'), 'usages_produits', type_='foreignkey')
    op.create_foreign_key(None, 'usages_produits', 'produits', ['numero_amm'], ['numero_amm'])
    op.alter_column('users', 'role',
               existing_type=postgresql.ENUM('farmer', 'advisor', 'admin', 'researcher', name='userrole'),
               type_=sa.String(length=50),
               nullable=False,
               existing_server_default=sa.text("'farmer'::userrole"))
    op.alter_column('users', 'status',
               existing_type=postgresql.ENUM('active', 'inactive', 'suspended', 'pending', name='userstatus'),
               type_=sa.String(length=50),
               nullable=False,
               existing_server_default=sa.text("'active'::userstatus"))
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
    op.alter_column('users', 'is_verified',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('users', 'is_superuser',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'is_superuser',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('users', 'is_verified',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
    op.alter_column('users', 'status',
               existing_type=sa.String(length=50),
               type_=postgresql.ENUM('active', 'inactive', 'suspended', 'pending', name='userstatus'),
               nullable=True,
               existing_server_default=sa.text("'active'::userstatus"))
    op.alter_column('users', 'role',
               existing_type=sa.String(length=50),
               type_=postgresql.ENUM('farmer', 'advisor', 'admin', 'researcher', name='userrole'),
               nullable=True,
               existing_server_default=sa.text("'farmer'::userrole"))
    op.drop_constraint(None, 'usages_produits', type_='foreignkey')
    op.create_foreign_key(op.f('usages_produits_numero_amm_fkey'), 'usages_produits', 'produits', ['numero_amm'], ['numero_amm'], ondelete='CASCADE')
    op.create_index(op.f('idx_usages_culture'), 'usages_produits', ['type_culture_libelle'], unique=False)
    op.create_index(op.f('idx_usages_amm'), 'usages_produits', ['numero_amm'], unique=False)
    op.alter_column('usages_produits', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('titulaires', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.create_index(op.f('idx_substances_nom'), 'substances_actives', ['nom_substance'], unique=False)
    op.alter_column('substances_actives', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.create_index(op.f('idx_produits_titulaire'), 'produits', ['titulaire_id'], unique=False)
    op.create_index(op.f('idx_produits_nom'), 'produits', ['nom_produit'], unique=False)
    op.create_index(op.f('idx_produits_etat'), 'produits', ['etat_autorisation'], unique=False)
    op.alter_column('produits', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(None, 'produit_substances', type_='foreignkey')
    op.drop_constraint(None, 'produit_substances', type_='foreignkey')
    op.create_foreign_key(op.f('produit_substances_numero_amm_fkey'), 'produit_substances', 'produits', ['numero_amm'], ['numero_amm'], ondelete='CASCADE')
    op.create_foreign_key(op.f('produit_substances_substance_id_fkey'), 'produit_substances', 'substances_actives', ['substance_id'], ['id'], ondelete='CASCADE')
    op.create_unique_constraint(op.f('produit_substances_numero_amm_substance_id_key'), 'produit_substances', ['numero_amm', 'substance_id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_produit_substances_substance'), 'produit_substances', ['substance_id'], unique=False)
    op.create_index(op.f('idx_produit_substances_amm'), 'produit_substances', ['numero_amm'], unique=False)
    op.alter_column('produit_substances', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.add_column('produit_phrases_risque', sa.Column('phrase_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'produit_phrases_risque', type_='foreignkey')
    op.drop_constraint(None, 'produit_phrases_risque', type_='foreignkey')
    op.create_foreign_key(op.f('produit_phrases_risque_phrase_id_fkey'), 'produit_phrases_risque', 'phrases_risque', ['phrase_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('produit_phrases_risque_numero_amm_fkey'), 'produit_phrases_risque', 'produits', ['numero_amm'], ['numero_amm'], ondelete='CASCADE')
    op.create_unique_constraint(op.f('produit_phrases_risque_numero_amm_phrase_id_key'), 'produit_phrases_risque', ['numero_amm', 'phrase_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('produit_phrases_risque', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_column('produit_phrases_risque', 'phrase_risque_id')
    op.add_column('produit_formulations', sa.Column('formulation', sa.VARCHAR(length=200), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'produit_formulations', type_='foreignkey')
    op.drop_constraint(None, 'produit_formulations', type_='foreignkey')
    op.create_foreign_key(op.f('produit_formulations_numero_amm_fkey'), 'produit_formulations', 'produits', ['numero_amm'], ['numero_amm'], ondelete='CASCADE')
    op.alter_column('produit_formulations', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_column('produit_formulations', 'formulation_id')
    op.add_column('produit_fonctions', sa.Column('fonction', sa.VARCHAR(length=200), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'produit_fonctions', type_='foreignkey')
    op.drop_constraint(None, 'produit_fonctions', type_='foreignkey')
    op.create_foreign_key(op.f('produit_fonctions_numero_amm_fkey'), 'produit_fonctions', 'produits', ['numero_amm'], ['numero_amm'], ondelete='CASCADE')
    op.alter_column('produit_fonctions', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_column('produit_fonctions', 'fonction_id')
    op.add_column('phrases_risque', sa.Column('code', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
    op.add_column('phrases_risque', sa.Column('libelle_long', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('phrases_risque', sa.Column('libelle_court', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.alter_column('phrases_risque', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('phrases_risque', 'type_phrase',
               existing_type=sa.String(length=10),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True)
    op.drop_column('phrases_risque', 'libelle_phrase')
    op.drop_column('phrases_risque', 'code_phrase')
    op.add_column('pests', sa.Column('damage_description', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('pests', sa.Column('control_methods', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_pests_severity_level'), table_name='pests')
    op.drop_index(op.f('ix_pests_primary_crop'), table_name='pests')
    op.drop_index(op.f('ix_pests_pest_type'), table_name='pests')
    op.drop_index(op.f('ix_pests_name'), table_name='pests')
    op.drop_index(op.f('ix_pests_id'), table_name='pests')
    op.alter_column('pests', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('pests', 'affected_crops',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               nullable=True)
    op.alter_column('pests', 'scientific_name',
               existing_type=sa.String(length=300),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
    op.alter_column('pests', 'name',
               existing_type=sa.String(length=200),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    op.alter_column('pests', 'id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.drop_column('pests', 'is_active')
    op.drop_column('pests', 'updated_at')
    op.drop_column('pests', 'search_vector')
    op.drop_column('pests', 'keywords')
    op.drop_column('pests', 'description')
    op.drop_column('pests', 'last_verified')
    op.drop_column('pests', 'data_source')
    op.drop_column('pests', 'confidence_score')
    op.drop_column('pests', 'scouting_frequency')
    op.drop_column('pests', 'trap_types')
    op.drop_column('pests', 'monitoring_methods')
    op.drop_column('pests', 'resistance_management')
    op.drop_column('pests', 'action_threshold')
    op.drop_column('pests', 'economic_threshold')
    op.drop_column('pests', 'yield_impact')
    op.drop_column('pests', 'cultural_control')
    op.drop_column('pests', 'chemical_control')
    op.drop_column('pests', 'biological_control')
    op.drop_column('pests', 'prevention_methods')
    op.drop_column('pests', 'treatment_options')
    op.drop_column('pests', 'geographic_distribution')
    op.drop_column('pests', 'seasonal_activity')
    op.drop_column('pests', 'favorable_conditions')
    op.drop_column('pests', 'host_range')
    op.drop_column('pests', 'overwintering_strategy')
    op.drop_column('pests', 'reproduction_rate')
    op.drop_column('pests', 'development_stages')
    op.drop_column('pests', 'behavioral_signs')
    op.drop_column('pests', 'visual_identification')
    op.drop_column('pests', 'pest_indicators')
    op.drop_column('pests', 'damage_patterns')
    op.drop_column('pests', 'primary_crop')
    op.drop_column('pests', 'severity_level')
    op.drop_column('pests', 'life_cycle')
    op.drop_column('pests', 'pest_family')
    op.drop_column('pests', 'pest_type')
    op.drop_column('pests', 'common_names')
    op.drop_constraint(None, 'parcelles', type_='foreignkey')
    op.create_foreign_key(op.f('parcelles_siret_fkey'), 'parcelles', 'exploitations', ['siret'], ['siret'], ondelete='CASCADE')
    op.drop_index(op.f('ix_parcelles_uuid_parcelle'), table_name='parcelles')
    op.drop_index(op.f('ix_parcelles_siret'), table_name='parcelles')
    op.drop_index(op.f('ix_parcelles_millesime'), table_name='parcelles')
    op.drop_index(op.f('ix_parcelles_id'), table_name='parcelles')
    op.drop_index(op.f('ix_parcelles_culture_code'), table_name='parcelles')
    op.drop_index(op.f('ix_parcelles_commune_insee'), table_name='parcelles')
    op.create_unique_constraint(op.f('parcelles_uuid_parcelle_key'), 'parcelles', ['uuid_parcelle'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_parcelles_siret'), 'parcelles', ['siret'], unique=False)
    op.alter_column('parcelles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('parcelles', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('parcelles', 'siret',
               existing_type=sa.VARCHAR(length=14),
               nullable=True)
    op.drop_constraint(None, 'messages', type_='foreignkey')
    op.drop_constraint(None, 'messages', type_='foreignkey')
    op.create_foreign_key(op.f('messages_conversation_id_fkey'), 'messages', 'conversations', ['conversation_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('messages_parent_message_id_fkey'), 'messages', 'messages', ['parent_message_id'], ['id'], ondelete='SET NULL')
    op.drop_index(op.f('ix_messages_thread_id'), table_name='messages')
    op.drop_index(op.f('ix_messages_sender'), table_name='messages')
    op.drop_index(op.f('ix_messages_id'), table_name='messages')
    op.drop_index(op.f('ix_messages_conversation_id'), table_name='messages')
    op.create_index(op.f('idx_messages_conversation'), 'messages', ['conversation_id'], unique=False)
    op.alter_column('messages', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('messages', 'thread_id',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
    op.alter_column('messages', 'conversation_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_index(op.f('ix_intrants_type_intrant'), table_name='intrants')
    op.drop_index(op.f('ix_intrants_id_intrant'), table_name='intrants')
    op.drop_index(op.f('ix_intrants_id'), table_name='intrants')
    op.drop_index(op.f('ix_intrants_code_amm'), table_name='intrants')
    op.create_unique_constraint(op.f('intrants_id_intrant_key'), 'intrants', ['id_intrant'], postgresql_nulls_not_distinct=False)
    op.alter_column('intrants', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('intrants', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(None, 'interventions', type_='foreignkey')
    op.drop_constraint(None, 'interventions', type_='foreignkey')
    op.create_foreign_key(op.f('interventions_parcelle_id_fkey'), 'interventions', 'parcelles', ['parcelle_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('interventions_siret_fkey'), 'interventions', 'exploitations', ['siret'], ['siret'], ondelete='CASCADE')
    op.drop_index(op.f('ix_interventions_uuid_intervention'), table_name='interventions')
    op.drop_index(op.f('ix_interventions_type_intervention'), table_name='interventions')
    op.drop_index(op.f('ix_interventions_siret'), table_name='interventions')
    op.drop_index(op.f('ix_interventions_parcelle_id'), table_name='interventions')
    op.drop_index(op.f('ix_interventions_id'), table_name='interventions')
    op.drop_index(op.f('ix_interventions_date_intervention'), table_name='interventions')
    op.create_unique_constraint(op.f('interventions_uuid_intervention_key'), 'interventions', ['uuid_intervention'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_interventions_parcelle'), 'interventions', ['parcelle_id'], unique=False)
    op.alter_column('interventions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('interventions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('interventions', 'siret',
               existing_type=sa.VARCHAR(length=14),
               nullable=True)
    op.alter_column('interventions', 'parcelle_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_index(op.f('ix_exploitations_siret'), table_name='exploitations')
    op.drop_index(op.f('ix_exploitations_region_code'), table_name='exploitations')
    op.drop_index(op.f('ix_exploitations_department_code'), table_name='exploitations')
    op.drop_index(op.f('ix_exploitations_commune_insee'), table_name='exploitations')
    op.alter_column('exploitations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('exploitations', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ix_diseases_severity_level'), table_name='diseases')
    op.drop_index(op.f('ix_diseases_primary_crop_eppo'), table_name='diseases')
    op.drop_index(op.f('ix_diseases_primary_crop'), table_name='diseases')
    op.drop_index(op.f('ix_diseases_name'), table_name='diseases')
    op.drop_index(op.f('ix_diseases_id'), table_name='diseases')
    op.drop_index(op.f('ix_diseases_eppo_code'), table_name='diseases')
    op.drop_index(op.f('ix_diseases_disease_type'), table_name='diseases')
    op.drop_index(op.f('ix_diseases_crop_id'), table_name='diseases')
    op.alter_column('diseases', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('diseases', 'treatment_options',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               nullable=True)
    op.alter_column('diseases', 'symptoms',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               nullable=True)
    op.alter_column('diseases', 'affected_crops',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               nullable=True)
    op.alter_column('diseases', 'scientific_name',
               existing_type=sa.String(length=300),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
    op.alter_column('diseases', 'name',
               existing_type=sa.String(length=200),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    op.alter_column('diseases', 'id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.drop_column('diseases', 'is_active')
    op.drop_column('diseases', 'updated_at')
    op.drop_column('diseases', 'search_vector')
    op.drop_column('diseases', 'keywords')
    op.drop_column('diseases', 'description')
    op.drop_column('diseases', 'last_verified')
    op.drop_column('diseases', 'data_source')
    op.drop_column('diseases', 'confidence_score')
    op.drop_column('diseases', 'resistance_management')
    op.drop_column('diseases', 'economic_threshold')
    op.drop_column('diseases', 'yield_impact')
    op.drop_column('diseases', 'chemical_treatments')
    op.drop_column('diseases', 'organic_treatments')
    op.drop_column('diseases', 'prevention_methods')
    op.drop_column('diseases', 'geographic_distribution')
    op.drop_column('diseases', 'seasonal_occurrence')
    op.drop_column('diseases', 'favorable_conditions')
    op.drop_column('diseases', 'damage_patterns')
    op.drop_column('diseases', 'visual_indicators')
    op.drop_column('diseases', 'crop_id')
    op.drop_column('diseases', 'primary_crop_eppo')
    op.drop_column('diseases', 'primary_crop')
    op.drop_column('diseases', 'eppo_code')
    op.drop_column('diseases', 'severity_level')
    op.drop_column('diseases', 'pathogen_name')
    op.drop_column('diseases', 'disease_type')
    op.drop_column('diseases', 'common_names')
    op.add_column('crops', sa.Column('water_requirements', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('crops', sa.Column('growth_cycle_days', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('crops', sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.drop_index('ix_crops_name_fr', table_name='crops')
    op.drop_index(op.f('ix_crops_name_en'), table_name='crops')
    op.drop_index(op.f('ix_crops_is_active'), table_name='crops')
    op.drop_index(op.f('ix_crops_id'), table_name='crops')
    op.drop_index(op.f('ix_crops_eppo_code'), table_name='crops')
    op.drop_index('ix_crops_category', table_name='crops')
    op.drop_index('ix_crops_active', table_name='crops')
    op.alter_column('crops', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('crops', 'category',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               existing_nullable=True)
    op.alter_column('crops', 'scientific_name',
               existing_type=sa.String(length=200),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
    op.alter_column('crops', 'id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.drop_column('crops', 'updated_at')
    op.drop_column('crops', 'is_active')
    op.drop_column('crops', 'typical_duration_days')
    op.drop_column('crops', 'growing_season')
    op.drop_column('crops', 'description')
    op.drop_column('crops', 'common_names')
    op.drop_column('crops', 'family')
    op.drop_column('crops', 'eppo_code')
    op.drop_column('crops', 'name_en')
    op.drop_column('crops', 'name_fr')
    op.drop_constraint(None, 'conversations', type_='foreignkey')
    op.create_foreign_key(op.f('conversations_farm_siret_fkey'), 'conversations', 'exploitations', ['farm_siret'], ['siret'], ondelete='SET NULL')
    op.create_foreign_key(op.f('conversations_user_id_fkey'), 'conversations', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_conversations_user_id'), table_name='conversations')
    op.drop_index(op.f('ix_conversations_organization_id'), table_name='conversations')
    op.drop_index(op.f('ix_conversations_id'), table_name='conversations')
    op.drop_index(op.f('ix_conversations_farm_siret'), table_name='conversations')
    op.drop_index(op.f('ix_conversations_agent_type'), table_name='conversations')
    op.create_index(op.f('idx_conversations_user'), 'conversations', ['user_id'], unique=False)
    op.create_index(op.f('idx_conversations_organization_id'), 'conversations', ['organization_id'], unique=False)
    op.alter_column('conversations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('conversations', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('conversations', 'status',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_server_default=sa.text("'active'::character varying"))
    op.alter_column('conversations', 'agent_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_server_default=sa.text("'orchestrator'::agenttype"))
    op.alter_column('conversations', 'title',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=500),
               nullable=True)
    op.alter_column('conversations', 'user_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.create_table('produit_conditions_emploi',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('numero_amm', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('condition_emploi', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['numero_amm'], ['produits.numero_amm'], name=op.f('produit_conditions_emploi_numero_amm_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('produit_conditions_emploi_pkey'))
    )
    op.create_table('spatial_ref_sys',
    sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('auth_name', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('auth_srid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('srtext', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.Column('proj4text', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.CheckConstraint('srid > 0 AND srid <= 998999', name=op.f('spatial_ref_sys_srid_check')),
    sa.PrimaryKeyConstraint('srid', name=op.f('spatial_ref_sys_pkey'))
    )
    op.create_table('ephy_products',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('ephy_products_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('numero_amm', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('nom_produit', sa.VARCHAR(length=300), autoincrement=False, nullable=False),
    sa.Column('type_produit', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('titulaire', sa.VARCHAR(length=300), autoincrement=False, nullable=True),
    sa.Column('etat_autorisation', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('date_autorisation', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='ephy_products_pkey'),
    sa.UniqueConstraint('numero_amm', name='ephy_products_numero_amm_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_ephy_products_nom'), 'ephy_products', ['nom_produit'], unique=False)
    op.create_index(op.f('idx_ephy_products_amm'), 'ephy_products', ['numero_amm'], unique=False)
    op.create_table('bbch_stages',
    sa.Column('bbch_code', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('principal_stage', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('crop_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('crop_eppo_code', sa.VARCHAR(length=6), autoincrement=False, nullable=True),
    sa.Column('description_fr', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description_en', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('typical_duration_days', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('kc_value', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.CheckConstraint('bbch_code >= 0 AND bbch_code <= 99', name=op.f('ck_bbch_code_range')),
    sa.CheckConstraint('kc_value IS NULL OR kc_value >= 0::numeric AND kc_value <= 2.0', name=op.f('ck_kc_value_range')),
    sa.CheckConstraint('principal_stage >= 0 AND principal_stage <= 9', name=op.f('ck_principal_stage_range')),
    sa.PrimaryKeyConstraint('bbch_code', name=op.f('bbch_stages_pkey'))
    )
    op.create_index(op.f('ix_bbch_stages_principal_stage'), 'bbch_stages', ['principal_stage'], unique=False)
    op.create_index(op.f('ix_bbch_stages_crop_type'), 'bbch_stages', ['crop_type'], unique=False)
    op.create_index(op.f('ix_bbch_stages_crop_eppo_code'), 'bbch_stages', ['crop_eppo_code'], unique=False)
    op.create_index(op.f('ix_bbch_stages_bbch_code'), 'bbch_stages', ['bbch_code'], unique=False)
    op.create_index(op.f('ix_bbch_principal'), 'bbch_stages', ['crop_type', 'principal_stage'], unique=False)
    op.create_index(op.f('ix_bbch_crop_type'), 'bbch_stages', ['crop_type'], unique=False)
    op.create_index(op.f('ix_bbch_crop_code'), 'bbch_stages', ['crop_type', 'bbch_code'], unique=False)
    op.create_table('permis_commerce_parallele',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('numero_permis', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('numero_amm_reference', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('nom_produit', sa.VARCHAR(length=300), autoincrement=False, nullable=True),
    sa.Column('titulaire_permis', sa.VARCHAR(length=300), autoincrement=False, nullable=True),
    sa.Column('pays_origine', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('date_delivrance', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('date_expiration', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('etat_permis', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['numero_amm_reference'], ['produits.numero_amm'], name=op.f('permis_commerce_parallele_numero_amm_reference_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('permis_commerce_parallele_pkey')),
    sa.UniqueConstraint('numero_permis', name=op.f('permis_commerce_parallele_numero_permis_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('ephy_substances',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('nom_substance', sa.VARCHAR(length=300), autoincrement=False, nullable=False),
    sa.Column('numero_cas', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('etat_autorisation', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('ephy_substances_pkey'))
    )
    op.create_index(op.f('idx_ephy_substances_nom'), 'ephy_substances', ['nom_substance'], unique=False)
    op.create_table('ephy_usages',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('numero_amm', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('culture', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('dose_retenue', sa.NUMERIC(precision=10, scale=4), autoincrement=False, nullable=True),
    sa.Column('dose_unite', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('bbch_min', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('bbch_max', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('nb_max_applications', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['numero_amm'], ['ephy_products.numero_amm'], name=op.f('ephy_usages_numero_amm_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('ephy_usages_pkey'))
    )
    op.create_index(op.f('idx_ephy_usages_amm'), 'ephy_usages', ['numero_amm'], unique=False)
    op.drop_index(op.f('ix_analytics_events_user_id'), table_name='analytics_events')
    op.drop_index(op.f('ix_analytics_events_session_id'), table_name='analytics_events')
    op.drop_index(op.f('ix_analytics_events_id'), table_name='analytics_events')
    op.drop_index(op.f('ix_analytics_events_event_type'), table_name='analytics_events')
    op.drop_index(op.f('ix_analytics_events_conversation_id'), table_name='analytics_events')
    op.drop_index('idx_analytics_events_user_created', table_name='analytics_events')
    op.drop_index('idx_analytics_events_type_created', table_name='analytics_events')
    op.drop_table('analytics_events')
    op.drop_index(op.f('ix_analytics_alerts_user_id'), table_name='analytics_alerts')
    op.drop_index(op.f('ix_analytics_alerts_is_read'), table_name='analytics_alerts')
    op.drop_index(op.f('ix_analytics_alerts_is_active'), table_name='analytics_alerts')
    op.drop_index(op.f('ix_analytics_alerts_id'), table_name='analytics_alerts')
    op.drop_index(op.f('ix_analytics_alerts_document_id'), table_name='analytics_alerts')
    op.drop_index(op.f('ix_analytics_alerts_alert_type'), table_name='analytics_alerts')
    op.drop_index(op.f('ix_analytics_alerts_alert_severity'), table_name='analytics_alerts')
    op.drop_index('idx_analytics_alerts_user_unread', table_name='analytics_alerts')
    op.drop_index('idx_analytics_alerts_active_severity', table_name='analytics_alerts')
    op.drop_table('analytics_alerts')
    op.drop_index(op.f('ix_query_analytics_user_role'), table_name='query_analytics')
    op.drop_index(op.f('ix_query_analytics_user_region'), table_name='query_analytics')
    op.drop_index(op.f('ix_query_analytics_user_id'), table_name='query_analytics')
    op.drop_index(op.f('ix_query_analytics_query_hash'), table_name='query_analytics')
    op.drop_index(op.f('ix_query_analytics_period_type'), table_name='query_analytics')
    op.drop_index(op.f('ix_query_analytics_period_start'), table_name='query_analytics')
    op.drop_index(op.f('ix_query_analytics_period_end'), table_name='query_analytics')
    op.drop_index(op.f('ix_query_analytics_id'), table_name='query_analytics')
    op.drop_index('idx_query_analytics_topics_period', table_name='query_analytics')
    op.drop_index('idx_query_analytics_products_period', table_name='query_analytics')
    op.drop_index('idx_query_analytics_hash_period', table_name='query_analytics')
    op.drop_table('query_analytics')
    op.drop_index(op.f('ix_content_gaps_target_audience'), table_name='content_gaps')
    op.drop_index(op.f('ix_content_gaps_status'), table_name='content_gaps')
    op.drop_index(op.f('ix_content_gaps_priority_score'), table_name='content_gaps')
    op.drop_index(op.f('ix_content_gaps_impact_score'), table_name='content_gaps')
    op.drop_index(op.f('ix_content_gaps_id'), table_name='content_gaps')
    op.drop_index(op.f('ix_content_gaps_gap_category'), table_name='content_gaps')
    op.drop_index(op.f('ix_content_gaps_effort_score'), table_name='content_gaps')
    op.drop_index(op.f('ix_content_gaps_due_date'), table_name='content_gaps')
    op.drop_index('idx_content_gaps_status_due', table_name='content_gaps')
    op.drop_index('idx_content_gaps_priority_impact', table_name='content_gaps')
    op.drop_table('content_gaps')
    op.drop_index(op.f('ix_user_segment_analytics_segment_value'), table_name='user_segment_analytics')
    op.drop_index(op.f('ix_user_segment_analytics_segment_type'), table_name='user_segment_analytics')
    op.drop_index(op.f('ix_user_segment_analytics_period_type'), table_name='user_segment_analytics')
    op.drop_index(op.f('ix_user_segment_analytics_period_start'), table_name='user_segment_analytics')
    op.drop_index(op.f('ix_user_segment_analytics_period_end'), table_name='user_segment_analytics')
    op.drop_index(op.f('ix_user_segment_analytics_id'), table_name='user_segment_analytics')
    op.drop_index('idx_user_segment_analytics_segment_period', table_name='user_segment_analytics')
    op.drop_table('user_segment_analytics')
    op.drop_index(op.f('ix_document_analytics_period_type'), table_name='document_analytics')
    op.drop_index(op.f('ix_document_analytics_period_start'), table_name='document_analytics')
    op.drop_index(op.f('ix_document_analytics_period_end'), table_name='document_analytics')
    op.drop_index(op.f('ix_document_analytics_id'), table_name='document_analytics')
    op.drop_index(op.f('ix_document_analytics_document_id'), table_name='document_analytics')
    op.drop_index(op.f('ix_document_analytics_document_audience'), table_name='document_analytics')
    op.drop_index('idx_document_analytics_doc_period', table_name='document_analytics')
    op.drop_index('idx_document_analytics_audience_period', table_name='document_analytics')
    op.drop_table('document_analytics')
    # ### end Alembic commands ###
