"""Fix model relationships and add foreign keys

Revision ID: 9548328e3725
Revises: 
Create Date: 2025-09-28 22:03:30.079409

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '9548328e3725'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('audit_log',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('table_name', sa.String(length=50), nullable=False),
    sa.Column('record_id', sa.Integer(), nullable=False),
    sa.Column('operation', sa.String(length=10), nullable=False),
    sa.Column('old_values', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('new_values', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('changed_by', sa.String(length=100), nullable=True),
    sa.Column('changed_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_audit_log_changed_at'), 'audit_log', ['changed_at'], unique=False)
    op.create_index(op.f('ix_audit_log_id'), 'audit_log', ['id'], unique=False)
    op.create_index(op.f('ix_audit_log_operation'), 'audit_log', ['operation'], unique=False)
    op.create_index(op.f('ix_audit_log_record_id'), 'audit_log', ['record_id'], unique=False)
    op.create_index(op.f('ix_audit_log_table_name'), 'audit_log', ['table_name'], unique=False)
    op.create_table('organizations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('legal_name', sa.String(length=255), nullable=True),
    sa.Column('siret', sa.String(length=14), nullable=True),
    sa.Column('siren', sa.String(length=9), nullable=True),
    sa.Column('organization_type', sa.Enum('FARM', 'COOPERATIVE', 'INPUT_COMPANY', 'ADVISOR', 'RESEARCH_INSTITUTE', 'GOVERNMENT_AGENCY', name='organizationtype'), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'SUSPENDED', 'PENDING_APPROVAL', name='organizationstatus'), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('website', sa.String(length=500), nullable=True),
    sa.Column('address', sa.Text(), nullable=True),
    sa.Column('postal_code', sa.String(length=10), nullable=True),
    sa.Column('city', sa.String(length=100), nullable=True),
    sa.Column('region_code', sa.String(length=20), nullable=True),
    sa.Column('country', sa.String(length=100), nullable=False),
    sa.Column('legal_form', sa.String(length=100), nullable=True),
    sa.Column('activity_codes', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('employee_count', sa.Numeric(precision=5, scale=0), nullable=True),
    sa.Column('annual_revenue', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('specialization', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('certifications', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('services_offered', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('organization_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_organizations_id'), 'organizations', ['id'], unique=False)
    op.create_index(op.f('ix_organizations_name'), 'organizations', ['name'], unique=False)
    op.create_index(op.f('ix_organizations_organization_type'), 'organizations', ['organization_type'], unique=False)
    op.create_index(op.f('ix_organizations_region_code'), 'organizations', ['region_code'], unique=False)
    op.create_index(op.f('ix_organizations_siren'), 'organizations', ['siren'], unique=False)
    op.create_index(op.f('ix_organizations_siret'), 'organizations', ['siret'], unique=True)
    op.create_table('permis_importation',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('nom_produit', sa.String(length=200), nullable=False),
    sa.Column('numero_permis', sa.String(length=20), nullable=False),
    sa.Column('etat_autorisation', sa.Enum('AUTORISE', 'RETIRE', 'SUSPENDU', 'EN_COURS', name='authorizationstatus'), nullable=True),
    sa.Column('detenteur_pcp', sa.String(length=200), nullable=True),
    sa.Column('produit_reference_francais', sa.String(length=200), nullable=True),
    sa.Column('numero_amm_reference_francais', sa.String(length=20), nullable=True),
    sa.Column('nom_produit_importe', sa.String(length=200), nullable=True),
    sa.Column('numero_amm_produit_importe', sa.String(length=50), nullable=True),
    sa.Column('etat_membre_origine', sa.String(length=50), nullable=True),
    sa.Column('mentions_etiquetage', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_permis_importation_id'), 'permis_importation', ['id'], unique=False)
    op.create_index(op.f('ix_permis_importation_numero_amm_reference_francais'), 'permis_importation', ['numero_amm_reference_francais'], unique=False)
    op.create_index(op.f('ix_permis_importation_numero_permis'), 'permis_importation', ['numero_permis'], unique=True)
    op.create_index(op.f('ix_permis_importation_produit_reference_francais'), 'permis_importation', ['produit_reference_francais'], unique=False)
    op.create_table('products',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('type_produit', sa.Enum('MFSC', 'PPP', name='producttype'), nullable=False),
    sa.Column('numero_amm', sa.String(length=20), nullable=False),
    sa.Column('nom_produit', sa.String(length=200), nullable=False),
    sa.Column('seconds_noms_commerciaux', sa.Text(), nullable=True),
    sa.Column('titulaire', sa.String(length=200), nullable=True),
    sa.Column('type_commercial', sa.String(length=50), nullable=True),
    sa.Column('gamme_usage', sa.String(length=50), nullable=True),
    sa.Column('etat_autorisation', sa.Enum('AUTORISE', 'RETIRE', 'SUSPENDU', 'EN_COURS', name='authorizationstatus'), nullable=False),
    sa.Column('date_retrait_produit', sa.DateTime(), nullable=True),
    sa.Column('date_premiere_autorisation', sa.DateTime(), nullable=True),
    sa.Column('num_amm_reference', sa.String(length=20), nullable=True),
    sa.Column('nom_produit_reference', sa.String(length=200), nullable=True),
    sa.Column('composition', sa.Text(), nullable=True),
    sa.Column('revendication', sa.Text(), nullable=True),
    sa.Column('denomination_classe', sa.String(length=100), nullable=True),
    sa.Column('formulations', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_products_etat_autorisation'), 'products', ['etat_autorisation'], unique=False)
    op.create_index(op.f('ix_products_id'), 'products', ['id'], unique=False)
    op.create_index(op.f('ix_products_nom_produit'), 'products', ['nom_produit'], unique=False)
    op.create_index(op.f('ix_products_numero_amm'), 'products', ['numero_amm'], unique=True)
    op.create_index(op.f('ix_products_type_produit'), 'products', ['type_produit'], unique=False)
    op.create_table('substances_actives',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('nom_substance', sa.String(length=200), nullable=False),
    sa.Column('numero_cas', sa.String(length=20), nullable=True),
    sa.Column('etat_autorisation', sa.Enum('AUTORISE', 'RETIRE', 'SUSPENDU', 'EN_COURS', name='authorizationstatus'), nullable=False),
    sa.Column('variants', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_substances_actives_etat_autorisation'), 'substances_actives', ['etat_autorisation'], unique=False)
    op.create_index(op.f('ix_substances_actives_id'), 'substances_actives', ['id'], unique=False)
    op.create_index(op.f('ix_substances_actives_nom_substance'), 'substances_actives', ['nom_substance'], unique=False)
    op.create_index(op.f('ix_substances_actives_numero_cas'), 'substances_actives', ['numero_cas'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('full_name', sa.String(length=255), nullable=True),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('role', sa.Enum('FARMER', 'ADVISOR', 'INSPECTOR', 'ADMIN', name='userrole'), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'SUSPENDED', 'PENDING_VERIFICATION', name='userstatus'), nullable=False),
    sa.Column('language_preference', sa.String(length=10), nullable=False),
    sa.Column('timezone', sa.String(length=50), nullable=False),
    sa.Column('notification_preferences', sa.Text(), nullable=True),
    sa.Column('profile_picture_url', sa.String(length=500), nullable=True),
    sa.Column('bio', sa.Text(), nullable=True),
    sa.Column('experience_years', sa.String(length=10), nullable=True),
    sa.Column('specialization', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('region_code', sa.String(length=20), nullable=True),
    sa.Column('department_code', sa.String(length=10), nullable=True),
    sa.Column('commune_insee', sa.String(length=10), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_login', sa.DateTime(timezone=True), nullable=True),
    sa.Column('email_verified_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_table('classifications_danger',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('libelle_court', sa.String(length=20), nullable=False),
    sa.Column('libelle_long', sa.Text(), nullable=False),
    sa.Column('type_classification', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_classifications_danger_id'), 'classifications_danger', ['id'], unique=False)
    op.create_index(op.f('ix_classifications_danger_libelle_court'), 'classifications_danger', ['libelle_court'], unique=False)
    op.create_index(op.f('ix_classifications_danger_product_id'), 'classifications_danger', ['product_id'], unique=False)
    op.create_table('conditions_emploi',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('categorie_condition', sa.String(length=100), nullable=True),
    sa.Column('condition_emploi_libelle', sa.Text(), nullable=False),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_conditions_emploi_categorie_condition'), 'conditions_emploi', ['categorie_condition'], unique=False)
    op.create_index(op.f('ix_conditions_emploi_id'), 'conditions_emploi', ['id'], unique=False)
    op.create_index(op.f('ix_conditions_emploi_product_id'), 'conditions_emploi', ['product_id'], unique=False)
    op.create_table('farms',
    sa.Column('siret', sa.String(length=14), nullable=False),
    sa.Column('farm_name', sa.String(length=255), nullable=False),
    sa.Column('legal_name', sa.String(length=255), nullable=True),
    sa.Column('legal_form', sa.String(length=100), nullable=True),
    sa.Column('owner_user_id', sa.UUID(), nullable=False),
    sa.Column('farm_type', sa.Enum('INDIVIDUAL', 'COOPERATIVE', 'CORPORATE', 'ORGANIC', 'CONVENTIONAL', 'MIXED', name='farmtype'), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'SUSPENDED', 'PENDING_VERIFICATION', name='farmstatus'), nullable=False),
    sa.Column('region_code', sa.String(length=20), nullable=False),
    sa.Column('department_code', sa.String(length=10), nullable=True),
    sa.Column('commune_insee', sa.String(length=10), nullable=True),
    sa.Column('address', sa.Text(), nullable=True),
    sa.Column('postal_code', sa.String(length=10), nullable=True),
    sa.Column('coordinates', geoalchemy2.types.Geography(geometry_type='POINT', srid=4326, from_text='ST_GeogFromText', name='geography'), nullable=True),
    sa.Column('total_area_ha', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('utilized_agricultural_area_ha', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('organic_certified', sa.Boolean(), nullable=False),
    sa.Column('organic_certification_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('organic_certification_body', sa.String(length=255), nullable=True),
    sa.Column('activity_codes', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('primary_productions', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('secondary_productions', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('annual_revenue', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('employee_count', sa.Numeric(precision=5, scale=0), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('website', sa.String(length=500), nullable=True),
    sa.Column('social_media', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_sync_with_api', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['owner_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('siret')
    )
    op.create_index('idx_farms_coordinates', 'farms', ['coordinates'], unique=False, postgresql_using='gist')
    op.create_index(op.f('ix_farms_owner_user_id'), 'farms', ['owner_user_id'], unique=False)
    op.create_index(op.f('ix_farms_region_code'), 'farms', ['region_code'], unique=False)
    op.create_index(op.f('ix_farms_siret'), 'farms', ['siret'], unique=False)
    op.create_table('knowledge_base_entries',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('organization_id', sa.UUID(), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('category', sa.String(length=100), nullable=False),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('content_type', sa.String(length=50), nullable=False),
    sa.Column('language', sa.String(length=10), nullable=False),
    sa.Column('version', sa.String(length=20), nullable=False),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('is_shared', sa.Boolean(), nullable=False),
    sa.Column('access_level', sa.Enum('OWNER', 'ADMIN', 'ADVISOR', 'VIEWER', 'READONLY', name='accesstype'), nullable=False),
    sa.Column('is_validated', sa.Boolean(), nullable=False),
    sa.Column('validated_by', sa.UUID(), nullable=True),
    sa.Column('validation_notes', sa.Text(), nullable=True),
    sa.Column('view_count', sa.Numeric(precision=10, scale=0), nullable=False),
    sa.Column('like_count', sa.Numeric(precision=10, scale=0), nullable=False),
    sa.Column('organization_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('validated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ),
    sa.ForeignKeyConstraint(['validated_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_knowledge_base_entries_category'), 'knowledge_base_entries', ['category'], unique=False)
    op.create_index(op.f('ix_knowledge_base_entries_created_by'), 'knowledge_base_entries', ['created_by'], unique=False)
    op.create_index(op.f('ix_knowledge_base_entries_id'), 'knowledge_base_entries', ['id'], unique=False)
    op.create_index(op.f('ix_knowledge_base_entries_organization_id'), 'knowledge_base_entries', ['organization_id'], unique=False)
    op.create_table('organization_memberships',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('organization_id', sa.UUID(), nullable=False),
    sa.Column('role', sa.String(length=50), nullable=False),
    sa.Column('access_level', sa.Enum('OWNER', 'ADMIN', 'ADVISOR', 'VIEWER', 'READONLY', name='accesstype'), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('permissions', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_organization_memberships_id'), 'organization_memberships', ['id'], unique=False)
    op.create_index(op.f('ix_organization_memberships_organization_id'), 'organization_memberships', ['organization_id'], unique=False)
    op.create_index(op.f('ix_organization_memberships_user_id'), 'organization_memberships', ['user_id'], unique=False)
    op.create_table('phrases_risque',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('code_phrase', sa.String(length=10), nullable=False),
    sa.Column('libelle_court_phrase', sa.Text(), nullable=True),
    sa.Column('libelle_long_phrase', sa.Text(), nullable=True),
    sa.Column('type_phrase', sa.String(length=10), nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_phrases_risque_code_phrase'), 'phrases_risque', ['code_phrase'], unique=False)
    op.create_index(op.f('ix_phrases_risque_id'), 'phrases_risque', ['id'], unique=False)
    op.create_index(op.f('ix_phrases_risque_product_id'), 'phrases_risque', ['product_id'], unique=False)
    op.create_index(op.f('ix_phrases_risque_type_phrase'), 'phrases_risque', ['type_phrase'], unique=False)
    op.create_table('product_substances',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('substance_id', sa.Integer(), nullable=False),
    sa.Column('concentration_value', sa.Numeric(precision=10, scale=3), nullable=True),
    sa.Column('concentration_unit', sa.String(length=10), nullable=True),
    sa.Column('fonction', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['substance_id'], ['substances_actives.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_product_substances_id'), 'product_substances', ['id'], unique=False)
    op.create_index(op.f('ix_product_substances_product_id'), 'product_substances', ['product_id'], unique=False)
    op.create_index(op.f('ix_product_substances_substance_id'), 'product_substances', ['substance_id'], unique=False)
    op.create_table('usages',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('identifiant_usage', sa.String(length=50), nullable=True),
    sa.Column('identifiant_usage_lib_court', sa.String(length=200), nullable=True),
    sa.Column('type_culture_libelle', sa.String(length=100), nullable=True),
    sa.Column('culture_commentaire', sa.Text(), nullable=True),
    sa.Column('stade_cultural_min_bbch', sa.Integer(), nullable=True),
    sa.Column('stade_cultural_max_bbch', sa.Integer(), nullable=True),
    sa.Column('dose_min_par_apport', sa.Numeric(precision=10, scale=3), nullable=True),
    sa.Column('dose_max_par_apport', sa.Numeric(precision=10, scale=3), nullable=True),
    sa.Column('dose_retenue', sa.Numeric(precision=10, scale=3), nullable=True),
    sa.Column('dose_unite', sa.String(length=20), nullable=True),
    sa.Column('nombre_max_application', sa.Integer(), nullable=True),
    sa.Column('delai_avant_recolte_jour', sa.Integer(), nullable=True),
    sa.Column('delai_avant_recolte_bbch', sa.Integer(), nullable=True),
    sa.Column('intervalle_minimum_applications_jour', sa.Integer(), nullable=True),
    sa.Column('etat_usage', sa.Enum('AUTORISE', 'RETIRE', 'SUSPENDU', 'EN_COURS', name='usagestatus'), nullable=False),
    sa.Column('date_decision', sa.DateTime(), nullable=True),
    sa.Column('date_fin_distribution', sa.DateTime(), nullable=True),
    sa.Column('date_fin_utilisation', sa.DateTime(), nullable=True),
    sa.Column('saison_application_min', sa.String(length=50), nullable=True),
    sa.Column('saison_application_max', sa.String(length=50), nullable=True),
    sa.Column('saison_application_min_commentaire', sa.Text(), nullable=True),
    sa.Column('saison_application_max_commentaire', sa.Text(), nullable=True),
    sa.Column('condition_emploi', sa.Text(), nullable=True),
    sa.Column('mentions_autorisees', sa.Text(), nullable=True),
    sa.Column('restrictions_usage', sa.Text(), nullable=True),
    sa.Column('restrictions_usage_libelle', sa.Text(), nullable=True),
    sa.Column('znt_aquatique_m', sa.Integer(), nullable=True),
    sa.Column('znt_arthropodes_non_cibles_m', sa.Integer(), nullable=True),
    sa.Column('znt_plantes_non_cibles_m', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_usages_etat_usage'), 'usages', ['etat_usage'], unique=False)
    op.create_index(op.f('ix_usages_id'), 'usages', ['id'], unique=False)
    op.create_index(op.f('ix_usages_identifiant_usage'), 'usages', ['identifiant_usage'], unique=False)
    op.create_index(op.f('ix_usages_product_id'), 'usages', ['product_id'], unique=False)
    op.create_index(op.f('ix_usages_type_culture_libelle'), 'usages', ['type_culture_libelle'], unique=False)
    op.create_table('user_activities',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=True),
    sa.Column('activity_type', sa.String(length=100), nullable=False),
    sa.Column('activity_description', sa.Text(), nullable=True),
    sa.Column('activity_metadata', sa.Text(), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('endpoint', sa.String(length=500), nullable=True),
    sa.Column('method', sa.String(length=10), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_activities_activity_type'), 'user_activities', ['activity_type'], unique=False)
    op.create_index(op.f('ix_user_activities_id'), 'user_activities', ['id'], unique=False)
    op.create_index(op.f('ix_user_activities_session_id'), 'user_activities', ['session_id'], unique=False)
    op.create_index(op.f('ix_user_activities_user_id'), 'user_activities', ['user_id'], unique=False)
    op.create_table('user_sessions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('session_token', sa.String(length=500), nullable=False),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('device_type', sa.String(length=50), nullable=True),
    sa.Column('country', sa.String(length=100), nullable=True),
    sa.Column('region', sa.String(length=100), nullable=True),
    sa.Column('city', sa.String(length=100), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('last_activity', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_sessions_id'), 'user_sessions', ['id'], unique=False)
    op.create_index(op.f('ix_user_sessions_session_token'), 'user_sessions', ['session_token'], unique=True)
    op.create_index(op.f('ix_user_sessions_user_id'), 'user_sessions', ['user_id'], unique=False)
    op.create_table('conversations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('farm_siret', sa.String(length=14), nullable=True),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('agent_type', sa.Enum('FARM_DATA', 'REGULATORY', 'WEATHER', 'CROP_HEALTH', 'PLANNING', 'SUSTAINABILITY', name='agenttype'), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'ARCHIVED', 'DELETED', name='conversationstatus'), nullable=False),
    sa.Column('context_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('summary', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_message_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['farm_siret'], ['farms.siret'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_conversations_agent_type'), 'conversations', ['agent_type'], unique=False)
    op.create_index(op.f('ix_conversations_farm_siret'), 'conversations', ['farm_siret'], unique=False)
    op.create_index(op.f('ix_conversations_id'), 'conversations', ['id'], unique=False)
    op.create_index(op.f('ix_conversations_user_id'), 'conversations', ['user_id'], unique=False)
    op.create_table('organization_farm_access',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('organization_id', sa.UUID(), nullable=False),
    sa.Column('farm_siret', sa.String(length=14), nullable=False),
    sa.Column('access_type', sa.Enum('OWNER', 'ADMIN', 'ADVISOR', 'VIEWER', 'READONLY', name='accesstype'), nullable=False),
    sa.Column('granted_by', sa.UUID(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('access_scope', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('restrictions', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('granted_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('revoked_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['farm_siret'], ['farms.siret'], ),
    sa.ForeignKeyConstraint(['granted_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_organization_farm_access_farm_siret'), 'organization_farm_access', ['farm_siret'], unique=False)
    op.create_index(op.f('ix_organization_farm_access_id'), 'organization_farm_access', ['id'], unique=False)
    op.create_index(op.f('ix_organization_farm_access_organization_id'), 'organization_farm_access', ['organization_id'], unique=False)
    op.create_table('parcels',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('farm_siret', sa.String(length=14), nullable=False),
    sa.Column('parcel_number', sa.String(length=50), nullable=False),
    sa.Column('cadastral_reference', sa.String(length=50), nullable=True),
    sa.Column('pac_parcel_id', sa.String(length=50), nullable=True),
    sa.Column('area_ha', sa.Numeric(precision=10, scale=4), nullable=False),
    sa.Column('coordinates', geoalchemy2.types.Geography(geometry_type='POLYGON', srid=4326, from_text='ST_GeogFromText', name='geography'), nullable=True),
    sa.Column('centroid', geoalchemy2.types.Geography(geometry_type='POINT', srid=4326, from_text='ST_GeogFromText', name='geography'), nullable=True),
    sa.Column('current_crop', sa.String(length=100), nullable=True),
    sa.Column('crop_variety', sa.String(length=100), nullable=True),
    sa.Column('planting_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('expected_harvest_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('soil_type', sa.String(length=100), nullable=True),
    sa.Column('ph_level', sa.Numeric(precision=3, scale=1), nullable=True),
    sa.Column('organic_matter_percent', sa.Numeric(precision=4, scale=2), nullable=True),
    sa.Column('irrigation_available', sa.Boolean(), nullable=False),
    sa.Column('drainage_system', sa.Boolean(), nullable=False),
    sa.Column('slope_percent', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('exposure', sa.String(length=20), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('parcel_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['farm_siret'], ['farms.siret'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_parcels_centroid', 'parcels', ['centroid'], unique=False, postgresql_using='gist')
    op.create_index('idx_parcels_coordinates', 'parcels', ['coordinates'], unique=False, postgresql_using='gist')
    op.create_index(op.f('ix_parcels_farm_siret'), 'parcels', ['farm_siret'], unique=False)
    op.create_index(op.f('ix_parcels_id'), 'parcels', ['id'], unique=False)
    op.create_index(op.f('ix_parcels_parcel_number'), 'parcels', ['parcel_number'], unique=False)
    op.create_table('crop_rotations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('parcel_id', sa.UUID(), nullable=False),
    sa.Column('crop_name', sa.String(length=100), nullable=False),
    sa.Column('crop_variety', sa.String(length=100), nullable=True),
    sa.Column('crop_family', sa.String(length=50), nullable=True),
    sa.Column('planting_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('harvest_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('season', sa.String(length=20), nullable=True),
    sa.Column('yield_quantity', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('yield_unit', sa.String(length=20), nullable=True),
    sa.Column('yield_per_hectare', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('quality_grade', sa.String(length=20), nullable=True),
    sa.Column('moisture_percent', sa.Numeric(precision=4, scale=2), nullable=True),
    sa.Column('protein_percent', sa.Numeric(precision=4, scale=2), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('weather_conditions', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['parcel_id'], ['parcels.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_crop_rotations_id'), 'crop_rotations', ['id'], unique=False)
    op.create_index(op.f('ix_crop_rotations_parcel_id'), 'crop_rotations', ['parcel_id'], unique=False)
    op.create_table('intervention_history',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('farm_siret', sa.String(length=14), nullable=False),
    sa.Column('parcel_id', sa.UUID(), nullable=True),
    sa.Column('intervention_type', sa.Enum('PLANTING', 'FERTILIZATION', 'PEST_CONTROL', 'DISEASE_CONTROL', 'WEED_CONTROL', 'HARVESTING', 'IRRIGATION', 'SOIL_TREATMENT', 'PRUNING', 'OTHER', name='interventiontype'), nullable=False),
    sa.Column('intervention_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('crop_name', sa.String(length=100), nullable=True),
    sa.Column('growth_stage', sa.String(length=50), nullable=True),
    sa.Column('weather_conditions', sa.Enum('SUNNY', 'CLOUDY', 'RAINY', 'WINDY', 'FOGGY', 'STORMY', name='weathercondition'), nullable=True),
    sa.Column('temperature_celsius', sa.Numeric(precision=4, scale=1), nullable=True),
    sa.Column('humidity_percent', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('wind_speed_kmh', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('effectiveness_rating', sa.Integer(), nullable=True),
    sa.Column('yield_impact', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('cost_per_hectare', sa.Numeric(precision=8, scale=2), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('history_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['farm_siret'], ['farms.siret'], ),
    sa.ForeignKeyConstraint(['parcel_id'], ['parcels.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_intervention_history_farm_siret'), 'intervention_history', ['farm_siret'], unique=False)
    op.create_index(op.f('ix_intervention_history_id'), 'intervention_history', ['id'], unique=False)
    op.create_index(op.f('ix_intervention_history_intervention_date'), 'intervention_history', ['intervention_date'], unique=False)
    op.create_index(op.f('ix_intervention_history_intervention_type'), 'intervention_history', ['intervention_type'], unique=False)
    op.create_index(op.f('ix_intervention_history_parcel_id'), 'intervention_history', ['parcel_id'], unique=False)
    op.create_table('messages',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('conversation_id', sa.UUID(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('sender', sa.String(length=20), nullable=False),
    sa.Column('agent_type', sa.Enum('FARM_DATA', 'REGULATORY', 'WEATHER', 'CROP_HEALTH', 'PLANNING', 'SUSTAINABILITY', name='agenttype'), nullable=True),
    sa.Column('message_type', sa.String(length=50), nullable=True),
    sa.Column('message_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('processing_time_ms', sa.Integer(), nullable=True),
    sa.Column('token_count', sa.Integer(), nullable=True),
    sa.Column('cost_usd', sa.Numeric(precision=10, scale=6), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['conversation_id'], ['conversations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_messages_conversation_id'), 'messages', ['conversation_id'], unique=False)
    op.create_index(op.f('ix_messages_id'), 'messages', ['id'], unique=False)
    op.create_index(op.f('ix_messages_sender'), 'messages', ['sender'], unique=False)
    op.create_table('voice_journal_entries',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('farm_siret', sa.String(length=14), nullable=False),
    sa.Column('parcel_id', sa.UUID(), nullable=True),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('intervention_type', sa.Enum('PLANTING', 'FERTILIZATION', 'PEST_CONTROL', 'DISEASE_CONTROL', 'WEED_CONTROL', 'HARVESTING', 'IRRIGATION', 'SOIL_TREATMENT', 'PRUNING', 'OTHER', name='interventiontype'), nullable=False),
    sa.Column('audio_file_path', sa.String(length=500), nullable=True),
    sa.Column('audio_duration_seconds', sa.Numeric(precision=8, scale=2), nullable=True),
    sa.Column('transcription_confidence', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('products_used', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('equipment_used', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('weather_conditions', sa.Enum('SUNNY', 'CLOUDY', 'RAINY', 'WINDY', 'FOGGY', 'STORMY', name='weathercondition'), nullable=True),
    sa.Column('temperature_celsius', sa.Numeric(precision=4, scale=1), nullable=True),
    sa.Column('humidity_percent', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('wind_speed_kmh', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('validation_status', sa.Enum('PENDING', 'VALIDATED', 'WARNING', 'ERROR', 'MANUAL_REVIEW', name='validationstatus'), nullable=False),
    sa.Column('validation_notes', sa.Text(), nullable=True),
    sa.Column('compliance_issues', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('safety_alerts', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('intervention_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('intervention_date', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['farm_siret'], ['farms.siret'], ),
    sa.ForeignKeyConstraint(['parcel_id'], ['parcels.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_voice_journal_entries_farm_siret'), 'voice_journal_entries', ['farm_siret'], unique=False)
    op.create_index(op.f('ix_voice_journal_entries_id'), 'voice_journal_entries', ['id'], unique=False)
    op.create_index(op.f('ix_voice_journal_entries_intervention_type'), 'voice_journal_entries', ['intervention_type'], unique=False)
    op.create_index(op.f('ix_voice_journal_entries_parcel_id'), 'voice_journal_entries', ['parcel_id'], unique=False)
    op.create_index(op.f('ix_voice_journal_entries_user_id'), 'voice_journal_entries', ['user_id'], unique=False)
    op.create_table('agent_responses',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('message_id', sa.UUID(), nullable=False),
    sa.Column('conversation_id', sa.UUID(), nullable=False),
    sa.Column('agent_type', sa.Enum('FARM_DATA', 'REGULATORY', 'WEATHER', 'CROP_HEALTH', 'PLANNING', 'SUSTAINABILITY', name='agenttype'), nullable=False),
    sa.Column('model_used', sa.String(length=100), nullable=True),
    sa.Column('response_time_ms', sa.Integer(), nullable=False),
    sa.Column('token_count_input', sa.Integer(), nullable=True),
    sa.Column('token_count_output', sa.Integer(), nullable=True),
    sa.Column('total_tokens', sa.Integer(), nullable=True),
    sa.Column('cost_usd', sa.Numeric(precision=10, scale=6), nullable=True),
    sa.Column('confidence_score', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('user_rating', sa.Integer(), nullable=True),
    sa.Column('feedback', sa.Text(), nullable=True),
    sa.Column('response_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('tools_used', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['conversation_id'], ['conversations.id'], ),
    sa.ForeignKeyConstraint(['message_id'], ['messages.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_agent_responses_agent_type'), 'agent_responses', ['agent_type'], unique=False)
    op.create_index(op.f('ix_agent_responses_conversation_id'), 'agent_responses', ['conversation_id'], unique=False)
    op.create_index(op.f('ix_agent_responses_id'), 'agent_responses', ['id'], unique=False)
    op.create_index(op.f('ix_agent_responses_message_id'), 'agent_responses', ['message_id'], unique=False)
    op.create_table('product_usage',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('journal_entry_id', sa.UUID(), nullable=False),
    sa.Column('product_name', sa.String(length=255), nullable=False),
    sa.Column('amm_number', sa.String(length=20), nullable=True),
    sa.Column('active_ingredients', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('quantity_used', sa.Numeric(precision=10, scale=3), nullable=False),
    sa.Column('unit', sa.String(length=20), nullable=False),
    sa.Column('concentration', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('application_rate', sa.Numeric(precision=8, scale=2), nullable=True),
    sa.Column('phi_days', sa.Integer(), nullable=True),
    sa.Column('reentry_period_hours', sa.Integer(), nullable=True),
    sa.Column('epi_required', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['journal_entry_id'], ['voice_journal_entries.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_product_usage_id'), 'product_usage', ['id'], unique=False)
    op.create_index(op.f('ix_product_usage_journal_entry_id'), 'product_usage', ['journal_entry_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_product_usage_journal_entry_id'), table_name='product_usage')
    op.drop_index(op.f('ix_product_usage_id'), table_name='product_usage')
    op.drop_table('product_usage')
    op.drop_index(op.f('ix_agent_responses_message_id'), table_name='agent_responses')
    op.drop_index(op.f('ix_agent_responses_id'), table_name='agent_responses')
    op.drop_index(op.f('ix_agent_responses_conversation_id'), table_name='agent_responses')
    op.drop_index(op.f('ix_agent_responses_agent_type'), table_name='agent_responses')
    op.drop_table('agent_responses')
    op.drop_index(op.f('ix_voice_journal_entries_user_id'), table_name='voice_journal_entries')
    op.drop_index(op.f('ix_voice_journal_entries_parcel_id'), table_name='voice_journal_entries')
    op.drop_index(op.f('ix_voice_journal_entries_intervention_type'), table_name='voice_journal_entries')
    op.drop_index(op.f('ix_voice_journal_entries_id'), table_name='voice_journal_entries')
    op.drop_index(op.f('ix_voice_journal_entries_farm_siret'), table_name='voice_journal_entries')
    op.drop_table('voice_journal_entries')
    op.drop_index(op.f('ix_messages_sender'), table_name='messages')
    op.drop_index(op.f('ix_messages_id'), table_name='messages')
    op.drop_index(op.f('ix_messages_conversation_id'), table_name='messages')
    op.drop_table('messages')
    op.drop_index(op.f('ix_intervention_history_parcel_id'), table_name='intervention_history')
    op.drop_index(op.f('ix_intervention_history_intervention_type'), table_name='intervention_history')
    op.drop_index(op.f('ix_intervention_history_intervention_date'), table_name='intervention_history')
    op.drop_index(op.f('ix_intervention_history_id'), table_name='intervention_history')
    op.drop_index(op.f('ix_intervention_history_farm_siret'), table_name='intervention_history')
    op.drop_table('intervention_history')
    op.drop_index(op.f('ix_crop_rotations_parcel_id'), table_name='crop_rotations')
    op.drop_index(op.f('ix_crop_rotations_id'), table_name='crop_rotations')
    op.drop_table('crop_rotations')
    op.drop_index(op.f('ix_parcels_parcel_number'), table_name='parcels')
    op.drop_index(op.f('ix_parcels_id'), table_name='parcels')
    op.drop_index(op.f('ix_parcels_farm_siret'), table_name='parcels')
    op.drop_index('idx_parcels_coordinates', table_name='parcels', postgresql_using='gist')
    op.drop_index('idx_parcels_centroid', table_name='parcels', postgresql_using='gist')
    op.drop_table('parcels')
    op.drop_index(op.f('ix_organization_farm_access_organization_id'), table_name='organization_farm_access')
    op.drop_index(op.f('ix_organization_farm_access_id'), table_name='organization_farm_access')
    op.drop_index(op.f('ix_organization_farm_access_farm_siret'), table_name='organization_farm_access')
    op.drop_table('organization_farm_access')
    op.drop_index(op.f('ix_conversations_user_id'), table_name='conversations')
    op.drop_index(op.f('ix_conversations_id'), table_name='conversations')
    op.drop_index(op.f('ix_conversations_farm_siret'), table_name='conversations')
    op.drop_index(op.f('ix_conversations_agent_type'), table_name='conversations')
    op.drop_table('conversations')
    op.drop_index(op.f('ix_user_sessions_user_id'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_session_token'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_id'), table_name='user_sessions')
    op.drop_table('user_sessions')
    op.drop_index(op.f('ix_user_activities_user_id'), table_name='user_activities')
    op.drop_index(op.f('ix_user_activities_session_id'), table_name='user_activities')
    op.drop_index(op.f('ix_user_activities_id'), table_name='user_activities')
    op.drop_index(op.f('ix_user_activities_activity_type'), table_name='user_activities')
    op.drop_table('user_activities')
    op.drop_index(op.f('ix_usages_type_culture_libelle'), table_name='usages')
    op.drop_index(op.f('ix_usages_product_id'), table_name='usages')
    op.drop_index(op.f('ix_usages_identifiant_usage'), table_name='usages')
    op.drop_index(op.f('ix_usages_id'), table_name='usages')
    op.drop_index(op.f('ix_usages_etat_usage'), table_name='usages')
    op.drop_table('usages')
    op.drop_index(op.f('ix_product_substances_substance_id'), table_name='product_substances')
    op.drop_index(op.f('ix_product_substances_product_id'), table_name='product_substances')
    op.drop_index(op.f('ix_product_substances_id'), table_name='product_substances')
    op.drop_table('product_substances')
    op.drop_index(op.f('ix_phrases_risque_type_phrase'), table_name='phrases_risque')
    op.drop_index(op.f('ix_phrases_risque_product_id'), table_name='phrases_risque')
    op.drop_index(op.f('ix_phrases_risque_id'), table_name='phrases_risque')
    op.drop_index(op.f('ix_phrases_risque_code_phrase'), table_name='phrases_risque')
    op.drop_table('phrases_risque')
    op.drop_index(op.f('ix_organization_memberships_user_id'), table_name='organization_memberships')
    op.drop_index(op.f('ix_organization_memberships_organization_id'), table_name='organization_memberships')
    op.drop_index(op.f('ix_organization_memberships_id'), table_name='organization_memberships')
    op.drop_table('organization_memberships')
    op.drop_index(op.f('ix_knowledge_base_entries_organization_id'), table_name='knowledge_base_entries')
    op.drop_index(op.f('ix_knowledge_base_entries_id'), table_name='knowledge_base_entries')
    op.drop_index(op.f('ix_knowledge_base_entries_created_by'), table_name='knowledge_base_entries')
    op.drop_index(op.f('ix_knowledge_base_entries_category'), table_name='knowledge_base_entries')
    op.drop_table('knowledge_base_entries')
    op.drop_index(op.f('ix_farms_siret'), table_name='farms')
    op.drop_index(op.f('ix_farms_region_code'), table_name='farms')
    op.drop_index(op.f('ix_farms_owner_user_id'), table_name='farms')
    op.drop_index('idx_farms_coordinates', table_name='farms', postgresql_using='gist')
    op.drop_table('farms')
    op.drop_index(op.f('ix_conditions_emploi_product_id'), table_name='conditions_emploi')
    op.drop_index(op.f('ix_conditions_emploi_id'), table_name='conditions_emploi')
    op.drop_index(op.f('ix_conditions_emploi_categorie_condition'), table_name='conditions_emploi')
    op.drop_table('conditions_emploi')
    op.drop_index(op.f('ix_classifications_danger_product_id'), table_name='classifications_danger')
    op.drop_index(op.f('ix_classifications_danger_libelle_court'), table_name='classifications_danger')
    op.drop_index(op.f('ix_classifications_danger_id'), table_name='classifications_danger')
    op.drop_table('classifications_danger')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_substances_actives_numero_cas'), table_name='substances_actives')
    op.drop_index(op.f('ix_substances_actives_nom_substance'), table_name='substances_actives')
    op.drop_index(op.f('ix_substances_actives_id'), table_name='substances_actives')
    op.drop_index(op.f('ix_substances_actives_etat_autorisation'), table_name='substances_actives')
    op.drop_table('substances_actives')
    op.drop_index(op.f('ix_products_type_produit'), table_name='products')
    op.drop_index(op.f('ix_products_numero_amm'), table_name='products')
    op.drop_index(op.f('ix_products_nom_produit'), table_name='products')
    op.drop_index(op.f('ix_products_id'), table_name='products')
    op.drop_index(op.f('ix_products_etat_autorisation'), table_name='products')
    op.drop_table('products')
    op.drop_index(op.f('ix_permis_importation_produit_reference_francais'), table_name='permis_importation')
    op.drop_index(op.f('ix_permis_importation_numero_permis'), table_name='permis_importation')
    op.drop_index(op.f('ix_permis_importation_numero_amm_reference_francais'), table_name='permis_importation')
    op.drop_index(op.f('ix_permis_importation_id'), table_name='permis_importation')
    op.drop_table('permis_importation')
    op.drop_index(op.f('ix_organizations_siret'), table_name='organizations')
    op.drop_index(op.f('ix_organizations_siren'), table_name='organizations')
    op.drop_index(op.f('ix_organizations_region_code'), table_name='organizations')
    op.drop_index(op.f('ix_organizations_organization_type'), table_name='organizations')
    op.drop_index(op.f('ix_organizations_name'), table_name='organizations')
    op.drop_index(op.f('ix_organizations_id'), table_name='organizations')
    op.drop_table('organizations')
    op.drop_index(op.f('ix_audit_log_table_name'), table_name='audit_log')
    op.drop_index(op.f('ix_audit_log_record_id'), table_name='audit_log')
    op.drop_index(op.f('ix_audit_log_operation'), table_name='audit_log')
    op.drop_index(op.f('ix_audit_log_id'), table_name='audit_log')
    op.drop_index(op.f('ix_audit_log_changed_at'), table_name='audit_log')
    op.drop_table('audit_log')
    # ### end Alembic commands ###
