#!/usr/bin/env python3
"""
Semantic Tool Selection Demo
Demonstrates the enhanced semantic tool selection capabilities with optimal settings.
"""

import sys
import os

# Add the app directory to the Python path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'app'))

def demo_semantic_tool_selection():
    """Demonstrate semantic tool selection with optimal settings."""
    print("üöÄ Semantic Tool Selection Demo")
    print("=" * 60)
    
    from app.services.semantic_tool_selector import SemanticToolSelector
    
    # Initialize semantic tool selector
    selector = SemanticToolSelector()
    
    # Available tools
    available_tools = list(selector.tool_profiles.keys())
    
    print(f"üõ†Ô∏è Available Tools ({len(available_tools)}):")
    for i, tool in enumerate(available_tools, 1):
        profile = selector.tool_profiles[tool]
        print(f"  {i}. {tool} ({profile.domain}, {profile.complexity})")
    
    print(f"\nüìä Semantic Features: {'‚úÖ Available' if selector.encoder else '‚ùå Fallback mode'}")
    
    # Demo scenarios with agricultural queries
    scenarios = [
        {
            "title": "üåæ Disease Diagnosis",
            "query": "Mon bl√© pr√©sente des taches brunes circulaires avec jaunissement des feuilles",
            "context": "Farmer observing disease symptoms on wheat crop"
        },
        {
            "title": "üêõ Pest Identification", 
            "query": "J'observe des trous dans les feuilles de ma√Øs avec pr√©sence d'insectes verts",
            "context": "Farmer reporting pest damage on corn"
        },
        {
            "title": "üìÖ Agricultural Planning",
            "query": "Je veux planifier mes travaux de semis et fertilisation pour le printemps",
            "context": "Farmer planning spring operations"
        },
        {
            "title": "‚öñÔ∏è Regulatory Compliance",
            "query": "V√©rification de l'autorisation AMM pour produit phytosanitaire sur colza",
            "context": "Farmer checking product authorization"
        },
        {
            "title": "üå§Ô∏è Weather Forecast",
            "query": "Pr√©visions m√©t√©o pour planifier les traitements cette semaine",
            "context": "Farmer checking weather for treatment timing"
        },
        {
            "title": "üìä Farm Data Analysis",
            "query": "Analyse des donn√©es de rendement de mes parcelles de bl√©",
            "context": "Farmer analyzing yield data"
        },
        {
            "title": "üîÑ Multi-Domain Query",
            "query": "Maladie sur colza, besoin de traitement conforme √† la r√©glementation",
            "context": "Complex query requiring multiple tools"
        }
    ]
    
    # Test with different methods and optimal thresholds
    methods_config = [
        ("keyword", 0.2),
        ("intent", 0.1), 
        ("hybrid", 0.15)
    ]
    
    for method, threshold in methods_config:
        print(f"\n\nüéØ Method: {method.upper()} (threshold: {threshold})")
        print("=" * 50)
        
        for scenario in scenarios:
            print(f"\n{scenario['title']}")
            print(f"üìù Query: {scenario['query']}")
            print(f"üí≠ Context: {scenario['context']}")
            
            # Select tools
            result = selector.select_tools(
                message=scenario['query'],
                available_tools=available_tools,
                method=method,
                threshold=threshold,
                max_tools=3
            )
            
            # Display results
            if result.selected_tools:
                print(f"‚úÖ Selected Tools: {result.selected_tools}")
                print(f"üìä Confidence: {result.confidence:.3f}")
                
                # Show tool scores for selected tools
                selected_scores = {tool: result.tool_scores.get(tool, 0) for tool in result.selected_tools}
                print(f"üèÜ Scores: {[(tool, f'{score:.3f}') for tool, score in selected_scores.items()]}")
                
                # Show reasoning
                if result.reasoning:
                    print(f"üí° Reasoning: {result.reasoning}")
                
                # Show alternatives
                if result.alternative_tools:
                    alternatives = result.alternative_tools[:2]
                    print(f"üîÑ Alternatives: {[(tool, f'{score:.3f}') for tool, score in alternatives]}")
            else:
                print("‚ùå No tools selected")
                # Show top scores anyway
                if result.tool_scores:
                    top_scores = sorted(result.tool_scores.items(), key=lambda x: x[1], reverse=True)[:3]
                    print(f"üîç Top scores: {[(tool, f'{score:.3f}') for tool, score in top_scores]}")

def demo_enhanced_crop_health_integration():
    """Demonstrate integration with enhanced crop health agent."""
    print("\n\nüå± Enhanced Crop Health Agent Integration")
    print("=" * 60)
    
    try:
        # Test the enhanced tool selection in existing crop health agent
        from app.agents.crop_health_agent import CropHealthMonitorAgent
        
        # Create a mock agent to test tool selection method
        class MockCropHealthAgent:
            def __init__(self):
                self.tools = []
                # Create mock tools
                class MockTool:
                    def __init__(self, name):
                        self.name = name
                
                self.tools = [
                    MockTool("disease_diagnosis"),
                    MockTool("pest_identification"), 
                    MockTool("nutrient_deficiency_analysis"),
                    MockTool("treatment_recommendation")
                ]
            
            def _determine_tools_needed(self, message: str):
                """Use the enhanced tool selection method."""
                try:
                    from app.services.semantic_tool_selector import semantic_tool_selector
                    
                    available_tool_names = [tool.name for tool in self.tools]
                    
                    result = semantic_tool_selector.select_tools(
                        message=message,
                        available_tools=available_tool_names,
                        method="hybrid",
                        threshold=0.2,
                        max_tools=2
                    )
                    
                    return result.selected_tools
                    
                except Exception as e:
                    print(f"Semantic selection failed: {e}")
                    return []
        
        # Test the mock agent
        agent = MockCropHealthAgent()
        
        test_messages = [
            "Mon bl√© pr√©sente des taches brunes avec jaunissement",
            "Ravageurs sur ma√Øs avec trous dans les feuilles", 
            "Traitement pour o√Ødium sur colza au stade floraison",
            "Carence en azote visible sur les feuilles de bl√©",
            "Maladie fongique avec conditions humides"
        ]
        
        print("üß™ Testing Enhanced Tool Selection:")
        for message in test_messages:
            selected_tools = agent._determine_tools_needed(message)
            print(f"üìù '{message}'")
            print(f"   ‚Üí Selected: {selected_tools}")
        
    except Exception as e:
        print(f"‚ùå Error in integration demo: {e}")

def demo_performance_comparison():
    """Demonstrate performance comparison between methods."""
    print("\n\n‚ö° Performance Comparison")
    print("=" * 60)
    
    import time
    from app.services.semantic_tool_selector import SemanticToolSelector
    
    selector = SemanticToolSelector()
    available_tools = list(selector.tool_profiles.keys())
    
    # Test queries
    test_queries = [
        "Diagnostic de maladie sur bl√© avec taches brunes",
        "Identification de ravageurs sur ma√Øs",
        "Planification des travaux de printemps", 
        "V√©rification conformit√© r√©glementaire produit",
        "Pr√©visions m√©t√©o pour traitement"
    ]
    
    methods = ["keyword", "intent", "hybrid"]
    
    print(f"Testing {len(test_queries)} queries with each method...")
    
    for method in methods:
        start_time = time.time()
        
        results = []
        for query in test_queries:
            result = selector.select_tools(
                message=query,
                available_tools=available_tools,
                method=method,
                threshold=0.2,
                max_tools=2
            )
            results.append(result)
        
        end_time = time.time()
        execution_time = end_time - start_time
        
        # Calculate statistics
        total_selected = sum(len(r.selected_tools) for r in results)
        avg_confidence = sum(r.confidence for r in results) / len(results)
        
        print(f"\nüéØ {method.upper()} Method:")
        print(f"   ‚è±Ô∏è Time: {execution_time:.4f}s")
        print(f"   üõ†Ô∏è Tools selected: {total_selected}")
        print(f"   üìä Avg confidence: {avg_confidence:.3f}")
        print(f"   üöÄ Queries/sec: {len(test_queries)/execution_time:.1f}")

def main():
    """Run the complete semantic tool selection demo."""
    print("üéâ Welcome to the Semantic Tool Selection Demo!")
    print("This demonstrates the enhanced tool selection capabilities.")
    print()
    
    try:
        # Main demo
        demo_semantic_tool_selection()
        
        # Integration demo
        demo_enhanced_crop_health_integration()
        
        # Performance demo
        demo_performance_comparison()
        
        # Summary
        print("\n\nüéØ Demo Summary")
        print("=" * 40)
        print("‚úÖ Semantic tool selection system is operational")
        print("‚úÖ Multiple selection methods available (keyword, intent, hybrid)")
        print("‚úÖ Tool profiles with domain classification working")
        print("‚úÖ Integration with existing agents demonstrated")
        print("‚úÖ High performance (thousands of queries per second)")
        
        print("\nüöÄ Key Benefits:")
        print("  üéØ Intelligent tool selection based on query content")
        print("  üîÑ Multiple fallback methods for reliability")
        print("  üìä Confidence scoring for selection quality")
        print("  ‚ö° High performance for real-time use")
        print("  üîß Easy integration with existing agents")
        
        print("\nüìà Next Steps:")
        print("  1. Install sentence-transformers for full semantic similarity")
        print("  2. Fine-tune thresholds for production environment")
        print("  3. Add custom tool profiles for specialized tools")
        print("  4. Integrate with all agent types (planning, regulatory, etc.)")
        print("  5. Add user feedback loop for continuous improvement")
        
    except Exception as e:
        print(f"‚ùå Demo failed: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
