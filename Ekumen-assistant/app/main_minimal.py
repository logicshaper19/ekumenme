"""
Sophisticated Agricultural Assistant with Real Agent System
"""

import asyncio
import logging
import time
from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import json
from datetime import datetime
from typing import Dict, Any, Optional

# Import the sophisticated agent system
from app.agents.agent_selector import AgentSelector, TaskRequirements, TaskType
from app.agents.agent_manager import AgentManager
from app.agents.orchestrator import AgriculturalOrchestrator, WorkflowStep

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Create FastAPI application
app = FastAPI(
    title="Ekumen Agricultural Assistant - Minimal",
    description="Minimal version for testing frontend connection",
    version="1.0.0"
)

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://localhost:5173", "http://127.0.0.1:3000", "http://127.0.0.1:5173"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Store active WebSocket connections
active_connections = {}

# Initialize the sophisticated agent system
try:
    agent_selector = AgentSelector()
    agent_manager = AgentManager()
    orchestrator = AgriculturalOrchestrator()
    logger.info("Successfully initialized agent system components")
except Exception as e:
    logger.error(f"Error initializing agent system: {e}")
    # Create fallback components
    agent_selector = None
    agent_manager = None
    orchestrator = None

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {
        "status": "healthy",
        "service": "Ekumen Agricultural Assistant - Minimal",
        "version": "1.0.0",
        "timestamp": time.time()
    }

@app.websocket("/api/v1/chat/ws/{conversation_id}")
async def websocket_chat(websocket: WebSocket, conversation_id: str, token: str = None):
    """
    Minimal WebSocket endpoint for testing frontend connection
    """
    connection_id = f"{conversation_id}_{int(time.time())}"
    
    try:
        # Accept the connection
        await websocket.accept()
        active_connections[connection_id] = websocket
        
        # Send welcome message
        await websocket.send_text(json.dumps({
            "type": "connection",
            "message": "üåæ Connect√© √† l'assistant agricole (mode test)",
            "connection_id": connection_id,
            "timestamp": datetime.now().isoformat()
        }))
        
        logger.info(f"WebSocket connected: {connection_id}")
        
        # Listen for messages
        while True:
            try:
                # Receive message from client
                data = await websocket.receive_text()
                message_data = json.loads(data)
                
                logger.info(f"Received message: {message_data}")
                
                # Handle different message types
                if message_data.get("type") == "chat_message":
                    await handle_chat_message(websocket, message_data)
                elif message_data.get("type") == "voice_start":
                    await handle_voice_start(websocket)
                elif message_data.get("type") == "voice_stop":
                    await handle_voice_stop(websocket)
                elif message_data.get("type") == "voice_data":
                    await handle_voice_data(websocket, message_data)
                else:
                    logger.warning(f"Unknown message type: {message_data.get('type')}")
                    
            except WebSocketDisconnect:
                break
            except Exception as e:
                logger.error(f"Error processing message: {e}")
                await websocket.send_text(json.dumps({
                    "type": "error",
                    "message": f"Erreur de traitement: {str(e)}",
                    "timestamp": datetime.now().isoformat()
                }))
                
    except Exception as e:
        logger.error(f"WebSocket connection error: {e}")
    finally:
        # Clean up connection
        if connection_id in active_connections:
            del active_connections[connection_id]
        logger.info(f"WebSocket disconnected: {connection_id}")

async def handle_chat_message(websocket: WebSocket, message_data: dict):
    """Handle chat message with sophisticated agent system"""
    try:
        logger.info(f"Starting to handle chat message: {message_data}")
        user_message = message_data.get("message", "")
        agent_type = message_data.get("agent_type")

        # Use sophisticated agent selection if not provided
        if not agent_type:
            agent_selection = await select_agent_with_semantic_analysis(user_message)
            agent_type = agent_selection["selected_agent"]
            reasoning = agent_selection["reasoning"]
        else:
            reasoning = f"Agent pr√©-s√©lectionn√©: {get_agent_name(agent_type)}"

        logger.info(f"Selected agent: {agent_type} - {reasoning}")

        # Send agent selection notification
        await websocket.send_text(json.dumps({
            "type": "agent_selected",
            "agent_type": agent_type,
            "agent_name": get_agent_name(agent_type),
            "reasoning": reasoning,
            "timestamp": datetime.now().isoformat()
        }))

        logger.info("Sent agent selection notification")

        # Generate a message ID for this response
        message_id = f"msg_{int(datetime.now().timestamp() * 1000)}"

        # Send streaming start notification
        await websocket.send_text(json.dumps({
            "type": "llm_start",
            "message_id": message_id,
            "message": f"ü§ñ {get_agent_name(agent_type)} analyse votre demande...",
            "timestamp": datetime.now().isoformat()
        }))

        # Execute agent with real intelligence
        response_text = await execute_agent_with_streaming(agent_type, user_message, websocket, message_id)

        logger.info("Finished agent execution")

        # Send completion
        await websocket.send_text(json.dumps({
            "type": "complete",
            "message_id": message_id,
            "message": "‚úÖ R√©ponse termin√©e",
            "timestamp": datetime.now().isoformat()
        }))

        logger.info("Sent completion notification")

    except Exception as e:
        logger.error(f"Error in handle_chat_message: {e}")
        await websocket.send_text(json.dumps({
            "type": "error",
            "message": f"Erreur lors du traitement: {str(e)}",
            "timestamp": datetime.now().isoformat()
        }))

async def handle_voice_start(websocket: WebSocket):
    """Handle voice input start"""
    await websocket.send_text(json.dumps({
        "type": "voice_started",
        "message": "üé§ √âcoute vocale activ√©e",
        "timestamp": datetime.now().isoformat()
    }))

async def handle_voice_stop(websocket: WebSocket):
    """Handle voice input stop"""
    await websocket.send_text(json.dumps({
        "type": "voice_stopped",
        "message": "üé§ √âcoute vocale arr√™t√©e",
        "timestamp": datetime.now().isoformat()
    }))

async def handle_voice_data(websocket: WebSocket, message_data: dict):
    """Handle voice data (simulate transcription)"""
    # Simulate voice transcription
    await websocket.send_text(json.dumps({
        "type": "voice_transcript",
        "text": "Transcription simul√©e: Mon bl√© a des taches jaunes",
        "is_final": True,
        "timestamp": datetime.now().isoformat()
    }))

async def select_agent_with_semantic_analysis(message: str) -> Dict[str, Any]:
    """Use sophisticated agent selection with semantic analysis"""
    try:
        # Use sophisticated agent selector if available
        if agent_selector:
            # Create task requirements based on message analysis
            task_requirements = TaskRequirements(
                task_type=classify_task_type(message),
                complexity="moderate",
                urgency="medium",
                data_requirements=extract_data_requirements(message),
                output_format="conversational"
            )

            # Use the sophisticated agent selector
            selection_result = agent_selector.select_agent(message, task_requirements)
            return selection_result
        else:
            # Fallback to enhanced keyword-based selection
            selected_agent = classify_agent_by_keywords(message)
            return {
                "selected_agent": selected_agent,
                "reasoning": f"S√©lection bas√©e sur l'analyse des mots-cl√©s pour {get_agent_name(selected_agent)}",
                "confidence": 0.7
            }

    except Exception as e:
        logger.error(f"Error in agent selection: {e}")
        return {
            "selected_agent": "farm_data",
            "reasoning": f"S√©lection par d√©faut suite √† une erreur: {str(e)}",
            "confidence": 0.5
        }

def classify_agent_by_keywords(message: str) -> str:
    """Enhanced keyword-based agent classification"""
    message_lower = message.lower()

    # Weather-related keywords
    weather_keywords = ["m√©t√©o", "pluie", "vent", "temp√©rature", "climat", "pr√©vision", "temps", "orage", "gel", "s√©cheresse"]
    if any(word in message_lower for word in weather_keywords):
        return "weather"

    # Crop health keywords
    health_keywords = ["maladie", "parasite", "sant√©", "traitement", "sympt√¥me", "fongicide", "insecticide", "tache", "jaunissement", "fl√©trissement"]
    if any(word in message_lower for word in health_keywords):
        return "crop_health"

    # Regulatory/compliance keywords
    regulatory_keywords = ["r√©glementation", "amm", "conformit√©", "autorisation", "l√©gal", "norme", "znt", "dar", "phyto"]
    if any(word in message_lower for word in regulatory_keywords):
        return "regulatory"

    # Planning keywords
    planning_keywords = ["planification", "planning", "calendrier", "intervention", "programme", "organisation", "timing", "optimisation"]
    if any(word in message_lower for word in planning_keywords):
        return "planning"

    # Sustainability keywords
    sustainability_keywords = ["durable", "bio", "environnement", "√©cologique", "carbone", "biodiversit√©", "certification", "impact"]
    if any(word in message_lower for word in sustainability_keywords):
        return "sustainability"

    # Default to farm data for general questions
    return "farm_data"

def classify_task_type(message: str) -> TaskType:
    """Classify the task type based on message content"""
    message_lower = message.lower()

    # Weather-related keywords
    if any(word in message_lower for word in ["m√©t√©o", "pluie", "vent", "temp√©rature", "climat", "pr√©vision"]):
        return TaskType.WEATHER_FORECAST

    # Crop health keywords
    elif any(word in message_lower for word in ["maladie", "parasite", "sant√©", "traitement", "sympt√¥me", "fongicide", "insecticide"]):
        return TaskType.CROP_HEALTH

    # Regulatory/compliance keywords
    elif any(word in message_lower for word in ["r√©glementation", "amm", "conformit√©", "autorisation", "l√©gal", "norme"]):
        return TaskType.COMPLIANCE

    # Planning keywords
    elif any(word in message_lower for word in ["planification", "planning", "calendrier", "intervention", "programme", "organisation"]):
        return TaskType.PLANNING

    # Sustainability keywords
    elif any(word in message_lower for word in ["durable", "bio", "environnement", "√©cologique", "carbone", "biodiversit√©"]):
        return TaskType.SUSTAINABILITY

    # Default to data analysis
    else:
        return TaskType.DATA_ANALYSIS

def extract_data_requirements(message: str) -> list:
    """Extract data requirements from message"""
    requirements = []
    message_lower = message.lower()

    if any(word in message_lower for word in ["parcelle", "terrain", "champ"]):
        requirements.append("parcel_data")
    if any(word in message_lower for word in ["culture", "r√©colte", "rendement"]):
        requirements.append("crop_data")
    if any(word in message_lower for word in ["m√©t√©o", "climat"]):
        requirements.append("weather_data")
    if any(word in message_lower for word in ["produit", "traitement", "phyto"]):
        requirements.append("product_data")

    return requirements if requirements else ["general_data"]

def get_agent_name(agent_type: str) -> str:
    """Get human-readable agent name"""
    agent_names = {
        "crop_health": "Expert Sant√© des Cultures",
        "weather": "Expert M√©t√©orologie",
        "planning": "Expert Planification",
        "farm_data": "Expert Donn√©es d'Exploitation",
        "regulatory": "Expert Conformit√©",
        "sustainability": "Expert Durabilit√©"
    }
    return agent_names.get(agent_type, "Assistant G√©n√©ral")

async def execute_agent_with_streaming(agent_type: str, message: str, websocket: WebSocket, message_id: str) -> str:
    """Execute the selected agent with real intelligence and streaming"""
    try:
        logger.info(f"Executing agent {agent_type} for message: {message[:50]}...")

        # Use the agent manager if available
        if agent_manager:
            # Execute the agent using the agent manager in a thread pool to avoid blocking
            import concurrent.futures
            loop = asyncio.get_event_loop()

            with concurrent.futures.ThreadPoolExecutor() as executor:
                # Run the synchronous agent_manager.execute_agent in a thread
                result = await loop.run_in_executor(
                    executor,
                    agent_manager.execute_agent,
                    agent_type,
                    message,
                    {}
                )

            # Extract the response text from the result
            if isinstance(result, dict):
                response = result.get("response", str(result))
            else:
                response = str(result)

        else:
            # Fallback to enhanced mock response if agent manager is not available
            response = generate_enhanced_mock_response(message, agent_type)

        logger.info(f"Agent {agent_type} generated response: {response[:100]}...")

        # Stream the response character by character
        for i, char in enumerate(response):
            await websocket.send_text(json.dumps({
                "type": "token",
                "message_id": message_id,
                "token": char,
                "partial_response": response[:i+1],
                "timestamp": datetime.now().isoformat()
            }))

            # Small delay to simulate real streaming
            await asyncio.sleep(0.02)

        return response

    except Exception as e:
        logger.error(f"Error executing agent {agent_type}: {e}")
        error_response = f"üö® **Erreur lors de l'ex√©cution de l'agent {get_agent_name(agent_type)}**\n\nErreur: {str(e)}\n\nVeuillez r√©essayer ou reformuler votre question."

        # Stream error response
        for i, char in enumerate(error_response):
            await websocket.send_text(json.dumps({
                "type": "token",
                "message_id": message_id,
                "token": char,
                "partial_response": error_response[:i+1],
                "timestamp": datetime.now().isoformat()
            }))
            await asyncio.sleep(0.02)

        return error_response

def generate_enhanced_mock_response(message: str, agent_type: str) -> str:
    """Generate enhanced mock response with more sophisticated content"""
    agent_responses = {
        "crop_health": f"""üå± **Expert Sant√© des Cultures - Analyse Avanc√©e**

**Analyse de votre demande:** "{message}"

**Diagnostic pr√©liminaire:**
‚Ä¢ √âvaluation des sympt√¥mes observ√©s
‚Ä¢ Identification des facteurs de risque
‚Ä¢ Analyse des conditions environnementales

**Recommandations sp√©cialis√©es:**
‚Ä¢ Inspection d√©taill√©e des zones affect√©es
‚Ä¢ Tests de laboratoire si n√©cessaire
‚Ä¢ Protocole de traitement adapt√©
‚Ä¢ Suivi et monitoring

**Prochaines √©tapes:**
Souhaitez-vous des d√©tails sur un aspect particulier du diagnostic?""",

        "weather": f"""üå§Ô∏è **Expert M√©t√©orologie - Analyse Climatique**

**Analyse m√©t√©orologique pour:** "{message}"

**Conditions actuelles:**
‚Ä¢ Temp√©rature: 15¬∞C (optimal pour la saison)
‚Ä¢ Humidit√© relative: 75%
‚Ä¢ Vitesse du vent: 8 km/h
‚Ä¢ Pression atmosph√©rique: 1013 hPa

**Pr√©visions 7 jours:**
‚Ä¢ Tendance stable avec quelques pr√©cipitations
‚Ä¢ Fen√™tres d'intervention favorables identifi√©es
‚Ä¢ Risques m√©t√©orologiques √©valu√©s

**Recommandations agricoles:**
Conditions favorables pour les interventions planifi√©es.""",

        "regulatory": f"""‚öñÔ∏è **Expert Conformit√© - Analyse R√©glementaire**

**√âvaluation r√©glementaire de:** "{message}"

**Points de conformit√© v√©rifi√©s:**
‚Ä¢ Autorisation de Mise sur le March√© (AMM)
‚Ä¢ Respect des Zones Non Trait√©es (ZNT)
‚Ä¢ D√©lais avant r√©colte (DAR)
‚Ä¢ Conditions d'application

**Statut de conformit√©:**
‚úÖ Conforme aux r√©glementations en vigueur
‚úÖ Respect du cadre phytosanitaire fran√ßais
‚úÖ Tra√ßabilit√© assur√©e

**Documentation requise:**
Registre des traitements √† jour recommand√©.""",

        "planning": f"""üìã **Expert Planification - Optimisation Op√©rationnelle**

**Planification pour:** "{message}"

**Analyse de priorit√©s:**
‚Ä¢ Urgence: √âlev√©e
‚Ä¢ Ressources disponibles: Optimales
‚Ä¢ Fen√™tre d'intervention: 3-5 jours
‚Ä¢ ROI estim√©: Positif

**Planning optimis√©:**
1. **Phase 1:** Pr√©paration (J+1)
2. **Phase 2:** Intervention (J+2 √† J+3)
3. **Phase 3:** Suivi (J+7)

**Optimisation des ressources:**
Coordination avec les autres activit√©s de l'exploitation.""",

        "sustainability": f"""üåç **Expert Durabilit√© - Analyse Environnementale**

**√âvaluation de durabilit√© pour:** "{message}"

**Impact environnemental:**
‚Ä¢ Empreinte carbone: R√©duite (-15%)
‚Ä¢ Biodiversit√©: Impact positif
‚Ä¢ Qualit√© des sols: Pr√©serv√©e
‚Ä¢ Ressources hydriques: Optimis√©es

**Indicateurs de durabilit√©:**
‚Ä¢ Score environnemental: 8.5/10
‚Ä¢ Efficacit√© √©nerg√©tique: √âlev√©e
‚Ä¢ Circularit√©: Int√©gr√©e

**Recommandations √©cologiques:**
Pratiques durables align√©es avec les objectifs environnementaux.""",

        "farm_data": f"""üåæ **Expert Donn√©es d'Exploitation - Analyse Compl√®te**

**Analyse des donn√©es pour:** "{message}"

**M√©triques de performance:**
‚Ä¢ Rendement moyen: 7.2 t/ha (+5% vs ann√©e pr√©c√©dente)
‚Ä¢ Efficacit√© des intrants: 92%
‚Ä¢ Co√ªt de production: 850‚Ç¨/ha
‚Ä¢ Marge brute: 1,200‚Ç¨/ha

**Tendances identifi√©es:**
‚Ä¢ Am√©lioration continue des performances
‚Ä¢ Optimisation des co√ªts r√©ussie
‚Ä¢ Qualit√© des productions maintenue

**Recommandations data-driven:**
Opportunit√©s d'am√©lioration identifi√©es pour la prochaine campagne."""
    }

    return agent_responses.get(agent_type, f"""ü§ñ **Assistant Agricole G√©n√©ral**

**Traitement de votre demande:** "{message}"

**Analyse en cours...**
‚Ä¢ √âvaluation des param√®tres
‚Ä¢ Consultation des bases de donn√©es
‚Ä¢ G√©n√©ration des recommandations

**R√©ponse personnalis√©e en pr√©paration.**
Veuillez patienter pendant l'analyse compl√®te de votre situation.""")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
