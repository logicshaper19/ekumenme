"""
Exploitation (Farm) API endpoints
Provides access to farm/exploitation data from MesParcelles
"""

from typing import List, Optional
from fastapi import APIRouter, Depends, HTTPException, Query, status
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_, func

from app.core.database import get_async_db
from app.models.user import User
from app.models.mesparcelles import Exploitation, Parcelle, Intervention
from app.models.organization import OrganizationFarmAccess, OrganizationMembership
from app.services.shared import AuthService
from pydantic import BaseModel
from decimal import Decimal
from datetime import date
import uuid

router = APIRouter(prefix="/exploitation", tags=["Exploitation"])

# Initialize auth service
auth_service = AuthService()


class ExploitationResponse(BaseModel):
    """Response model for exploitation data"""
    siret: str
    nom: str
    region_code: Optional[str] = None
    department_code: Optional[str] = None
    commune_insee: Optional[str] = None
    surface_totale_ha: float
    type_exploitation: Optional[str] = None
    bio: bool
    certification_bio: Optional[str] = None
    date_certification_bio: Optional[date] = None
    extra_data: Optional[dict] = None
    
    class Config:
        from_attributes = True


class ExploitationStatsResponse(BaseModel):
    """Response model for exploitation with statistics"""
    exploitation: ExploitationResponse
    parcelle_count: int
    intervention_count: int
    total_surface_ha: float


@router.get("/", response_model=List[ExploitationResponse])
async def get_exploitations(
    current_user: User = Depends(auth_service.get_current_user),
    db: AsyncSession = Depends(get_async_db)
):
    """
    Get all exploitations (farms) accessible to the current user
    
    Args:
        current_user: Current authenticated user
        db: Database session
        
    Returns:
        List[ExploitationResponse]: List of exploitations
    """
    try:
        # Get user's accessible farm SIRETs
        accessible_farms_query = select(OrganizationFarmAccess.farm_siret).where(
            OrganizationFarmAccess.organization_id.in_(
                select(OrganizationMembership.organization_id)
                .where(OrganizationMembership.user_id == current_user.id)
            )
        )
        
        accessible_farms_result = await db.execute(accessible_farms_query)
        accessible_farm_sirets = [row[0] for row in accessible_farms_result.fetchall()]
        
        if not accessible_farm_sirets:
            return []
        
        # Get exploitations
        exploitations_query = select(Exploitation).where(
            Exploitation.siret.in_(accessible_farm_sirets)
        ).order_by(Exploitation.nom)
        
        exploitations_result = await db.execute(exploitations_query)
        exploitations = exploitations_result.scalars().all()
        
        return [
            ExploitationResponse(
                siret=exploitation.siret,
                nom=exploitation.nom,
                region_code=exploitation.region_code,
                department_code=exploitation.department_code,
                commune_insee=exploitation.commune_insee,
                surface_totale_ha=float(exploitation.surface_totale_ha),
                type_exploitation=exploitation.type_exploitation,
                bio=exploitation.bio,
                certification_bio=exploitation.certification_bio,
                date_certification_bio=exploitation.date_certification_bio,
                extra_data=exploitation.extra_data
            )
            for exploitation in exploitations
        ]
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to retrieve exploitations: {str(e)}"
        )


@router.get("/{farm_siret}", response_model=ExploitationResponse)
async def get_exploitation(
    farm_siret: str,
    current_user: User = Depends(auth_service.get_current_user),
    db: AsyncSession = Depends(get_async_db)
):
    """
    Get a specific exploitation by SIRET
    
    Args:
        farm_siret: SIRET of the exploitation
        current_user: Current authenticated user
        db: Database session
        
    Returns:
        ExploitationResponse: Exploitation details
    """
    try:
        # Check if user has access to this farm
        access_query = select(OrganizationFarmAccess).where(
            and_(
                OrganizationFarmAccess.organization_id.in_(
                    select(OrganizationMembership.organization_id)
                    .where(OrganizationMembership.user_id == current_user.id)
                ),
                OrganizationFarmAccess.farm_siret == farm_siret
            )
        )
        
        access_result = await db.execute(access_query)
        access = access_result.scalar_one_or_none()
        
        if not access:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Access denied to specified farm"
            )
        
        # Get exploitation
        exploitation_query = select(Exploitation).where(
            Exploitation.siret == farm_siret
        )
        
        exploitation_result = await db.execute(exploitation_query)
        exploitation = exploitation_result.scalar_one_or_none()
        
        if not exploitation:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Exploitation not found"
            )
        
        return ExploitationResponse(
            siret=exploitation.siret,
            nom=exploitation.nom,
            region_code=exploitation.region_code,
            department_code=exploitation.department_code,
            commune_insee=exploitation.commune_insee,
            surface_totale_ha=float(exploitation.surface_totale_ha),
            type_exploitation=exploitation.type_exploitation,
            bio=exploitation.bio,
            certification_bio=exploitation.certification_bio,
            date_certification_bio=exploitation.date_certification_bio,
            extra_data=exploitation.extra_data
        )
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to retrieve exploitation: {str(e)}"
        )


@router.get("/{farm_siret}/stats", response_model=ExploitationStatsResponse)
async def get_exploitation_stats(
    farm_siret: str,
    current_user: User = Depends(auth_service.get_current_user),
    db: AsyncSession = Depends(get_async_db)
):
    """
    Get exploitation with statistics (parcelle count, intervention count, total surface)
    
    Args:
        farm_siret: SIRET of the exploitation
        current_user: Current authenticated user
        db: Database session
        
    Returns:
        ExploitationStatsResponse: Exploitation with statistics
    """
    try:
        # Check if user has access to this farm
        access_query = select(OrganizationFarmAccess).where(
            and_(
                OrganizationFarmAccess.organization_id.in_(
                    select(OrganizationMembership.organization_id)
                    .where(OrganizationMembership.user_id == current_user.id)
                ),
                OrganizationFarmAccess.farm_siret == farm_siret
            )
        )
        
        access_result = await db.execute(access_query)
        access = access_result.scalar_one_or_none()
        
        if not access:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Access denied to specified farm"
            )
        
        # Get exploitation
        exploitation_query = select(Exploitation).where(
            Exploitation.siret == farm_siret
        )
        
        exploitation_result = await db.execute(exploitation_query)
        exploitation = exploitation_result.scalar_one_or_none()
        
        if not exploitation:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Exploitation not found"
            )
        
        # Get statistics
        # Parcelle count
        parcelle_count_query = select(func.count()).select_from(
            select(Parcelle).where(Parcelle.siret == farm_siret).subquery()
        )
        parcelle_count_result = await db.execute(parcelle_count_query)
        parcelle_count = parcelle_count_result.scalar()
        
        # Intervention count
        intervention_count_query = select(func.count()).select_from(
            select(Intervention).where(Intervention.siret == farm_siret).subquery()
        )
        intervention_count_result = await db.execute(intervention_count_query)
        intervention_count = intervention_count_result.scalar()
        
        # Total surface (sum of all parcelles)
        total_surface_query = select(func.coalesce(func.sum(Parcelle.surface_ha), 0)).where(
            Parcelle.siret == farm_siret
        )
        total_surface_result = await db.execute(total_surface_query)
        total_surface_ha = float(total_surface_result.scalar())
        
        return ExploitationStatsResponse(
            exploitation=ExploitationResponse(
                siret=exploitation.siret,
                nom=exploitation.nom,
                region_code=exploitation.region_code,
                department_code=exploitation.department_code,
                commune_insee=exploitation.commune_insee,
                surface_totale_ha=float(exploitation.surface_totale_ha),
                type_exploitation=exploitation.type_exploitation,
                bio=exploitation.bio,
                certification_bio=exploitation.certification_bio,
                date_certification_bio=exploitation.date_certification_bio,
                extra_data=exploitation.extra_data
            ),
            parcelle_count=parcelle_count,
            intervention_count=intervention_count,
            total_surface_ha=total_surface_ha
        )
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to retrieve exploitation statistics: {str(e)}"
        )
